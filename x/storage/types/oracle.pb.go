// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canine_chain/storage/oracle.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OracleRequest struct {
	Requester string     `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
	Merkle    []byte     `protobuf:"bytes,2,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Chunk     int64      `protobuf:"varint,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Bid       types.Coin `protobuf:"bytes,4,opt,name=bid,proto3" json:"bid"`
}

func (m *OracleRequest) Reset()         { *m = OracleRequest{} }
func (m *OracleRequest) String() string { return proto.CompactTextString(m) }
func (*OracleRequest) ProtoMessage()    {}
func (*OracleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee5b363fbde19aa, []int{0}
}
func (m *OracleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleRequest.Merge(m, src)
}
func (m *OracleRequest) XXX_Size() int {
	return m.Size()
}
func (m *OracleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OracleRequest proto.InternalMessageInfo

func (m *OracleRequest) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *OracleRequest) GetMerkle() []byte {
	if m != nil {
		return m.Merkle
	}
	return nil
}

func (m *OracleRequest) GetChunk() int64 {
	if m != nil {
		return m.Chunk
	}
	return 0
}

func (m *OracleRequest) GetBid() types.Coin {
	if m != nil {
		return m.Bid
	}
	return types.Coin{}
}

type OracleEntry struct {
	Owner  string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Merkle []byte `protobuf:"bytes,2,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Chunk  int64  `protobuf:"varint,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Data   []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *OracleEntry) Reset()         { *m = OracleEntry{} }
func (m *OracleEntry) String() string { return proto.CompactTextString(m) }
func (*OracleEntry) ProtoMessage()    {}
func (*OracleEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee5b363fbde19aa, []int{1}
}
func (m *OracleEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleEntry.Merge(m, src)
}
func (m *OracleEntry) XXX_Size() int {
	return m.Size()
}
func (m *OracleEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleEntry.DiscardUnknown(m)
}

var xxx_messageInfo_OracleEntry proto.InternalMessageInfo

func (m *OracleEntry) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *OracleEntry) GetMerkle() []byte {
	if m != nil {
		return m.Merkle
	}
	return nil
}

func (m *OracleEntry) GetChunk() int64 {
	if m != nil {
		return m.Chunk
	}
	return 0
}

func (m *OracleEntry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*OracleRequest)(nil), "canine_chain.storage.OracleRequest")
	proto.RegisterType((*OracleEntry)(nil), "canine_chain.storage.OracleEntry")
}

func init() { proto.RegisterFile("canine_chain/storage/oracle.proto", fileDescriptor_bee5b363fbde19aa) }

var fileDescriptor_bee5b363fbde19aa = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xc1, 0x4e, 0xf2, 0x40,
	0x14, 0x85, 0x3b, 0x3f, 0xfc, 0x24, 0x0c, 0xb8, 0x69, 0x88, 0xa9, 0xc4, 0x8c, 0x95, 0x55, 0x37,
	0xce, 0x04, 0x7c, 0x03, 0x8c, 0x3b, 0x12, 0x93, 0x2e, 0xdd, 0x98, 0xe9, 0x70, 0x53, 0x2a, 0x30,
	0x17, 0x67, 0x06, 0x95, 0x97, 0x30, 0x3e, 0x16, 0x4b, 0x96, 0xae, 0x8c, 0x81, 0x17, 0x31, 0xed,
	0x34, 0xe8, 0xd6, 0xdd, 0x39, 0x37, 0xe7, 0xde, 0x7c, 0xb9, 0x87, 0x5e, 0x2a, 0xa9, 0x0b, 0x0d,
	0x0f, 0x6a, 0x26, 0x0b, 0x2d, 0xac, 0x43, 0x23, 0x73, 0x10, 0x68, 0xa4, 0x5a, 0x00, 0x5f, 0x19,
	0x74, 0x18, 0xf6, 0x7e, 0x47, 0x78, 0x1d, 0xe9, 0x33, 0x85, 0x76, 0x89, 0x56, 0x64, 0xd2, 0x82,
	0x78, 0x1e, 0x66, 0xe0, 0xe4, 0x50, 0x28, 0x2c, 0xb4, 0xdf, 0xea, 0xf7, 0x72, 0xcc, 0xb1, 0x92,
	0xa2, 0x54, 0x7e, 0x3a, 0x78, 0x23, 0xf4, 0xe4, 0xae, 0x3a, 0x9e, 0xc2, 0xd3, 0x1a, 0xac, 0x0b,
	0xcf, 0x69, 0xdb, 0x78, 0x09, 0x26, 0x22, 0x31, 0x49, 0xda, 0xe9, 0xcf, 0x20, 0x3c, 0xa5, 0xad,
	0x25, 0x98, 0xf9, 0x02, 0xa2, 0x7f, 0x31, 0x49, 0xba, 0x69, 0xed, 0xc2, 0x1e, 0xfd, 0xaf, 0x66,
	0x6b, 0x3d, 0x8f, 0x1a, 0x31, 0x49, 0x1a, 0xa9, 0x37, 0xe1, 0x90, 0x36, 0xb2, 0x62, 0x1a, 0x35,
	0x63, 0x92, 0x74, 0x46, 0x67, 0xdc, 0x13, 0xf2, 0x92, 0x90, 0xd7, 0x84, 0xfc, 0x06, 0x0b, 0x3d,
	0x6e, 0x6e, 0x3f, 0x2f, 0x82, 0xb4, 0xcc, 0x0e, 0x80, 0x76, 0x3c, 0xcf, 0xad, 0x76, 0x66, 0x53,
	0xde, 0xc5, 0x17, 0x7d, 0x24, 0xf1, 0xe6, 0x8f, 0x14, 0x21, 0x6d, 0x4e, 0xa5, 0x93, 0x15, 0x46,
	0x37, 0xad, 0xf4, 0x78, 0xb2, 0xdd, 0x33, 0xb2, 0xdb, 0x33, 0xf2, 0xb5, 0x67, 0xe4, 0xfd, 0xc0,
	0x82, 0xdd, 0x81, 0x05, 0x1f, 0x07, 0x16, 0xdc, 0x8f, 0xf2, 0xc2, 0xcd, 0xd6, 0x19, 0x57, 0xb8,
	0x14, 0x8f, 0x52, 0xcd, 0xe5, 0x62, 0x22, 0x33, 0x2b, 0xfc, 0xcf, 0xaf, 0x7c, 0x2d, 0xaf, 0xc7,
	0x62, 0xdc, 0x66, 0x05, 0x36, 0x6b, 0x55, 0xcf, 0xbc, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xc4,
	0x7c, 0x2b, 0x30, 0xbd, 0x01, 0x00, 0x00,
}

func (m *OracleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Chunk != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Chunk))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OracleEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if m.Chunk != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Chunk))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovOracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OracleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.Chunk != 0 {
		n += 1 + sovOracle(uint64(m.Chunk))
	}
	l = m.Bid.Size()
	n += 1 + l + sovOracle(uint64(l))
	return n
}

func (m *OracleEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.Chunk != 0 {
		n += 1 + sovOracle(uint64(m.Chunk))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}

func sovOracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOracle(x uint64) (n int) {
	return sovOracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OracleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = append(m.Merkle[:0], dAtA[iNdEx:postIndex]...)
			if m.Merkle == nil {
				m.Merkle = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			m.Chunk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chunk |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = append(m.Merkle[:0], dAtA[iNdEx:postIndex]...)
			if m.Merkle == nil {
				m.Merkle = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			m.Chunk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chunk |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOracle = fmt.Errorf("proto: unexpected end of group")
)
