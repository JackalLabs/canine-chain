// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canine_chain/storage/zkproof.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProofPackage struct {
	Proof        string `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	VerifyingKey string `protobuf:"bytes,2,opt,name=verifying_key,json=verifyingKey,proto3" json:"verifying_key,omitempty"`
}

func (m *ProofPackage) Reset()         { *m = ProofPackage{} }
func (m *ProofPackage) String() string { return proto.CompactTextString(m) }
func (*ProofPackage) ProtoMessage()    {}
func (*ProofPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a667feff951f34e5, []int{0}
}
func (m *ProofPackage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProofPackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProofPackage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProofPackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProofPackage.Merge(m, src)
}
func (m *ProofPackage) XXX_Size() int {
	return m.Size()
}
func (m *ProofPackage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProofPackage.DiscardUnknown(m)
}

var xxx_messageInfo_ProofPackage proto.InternalMessageInfo

func (m *ProofPackage) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

func (m *ProofPackage) GetVerifyingKey() string {
	if m != nil {
		return m.VerifyingKey
	}
	return ""
}

func init() {
	proto.RegisterType((*ProofPackage)(nil), "canine_chain.storage.ProofPackage")
}

func init() {
	proto.RegisterFile("canine_chain/storage/zkproof.proto", fileDescriptor_a667feff951f34e5)
}

var fileDescriptor_a667feff951f34e5 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4a, 0x4e, 0xcc, 0xcb,
	0xcc, 0x4b, 0x8d, 0x4f, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x2f, 0x2e, 0xc9, 0x2f, 0x4a, 0x4c, 0x4f,
	0xd5, 0xaf, 0xca, 0x2e, 0x28, 0xca, 0xcf, 0x4f, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12,
	0x41, 0x56, 0xa3, 0x07, 0x55, 0xa3, 0xe4, 0xc9, 0xc5, 0x13, 0x00, 0x52, 0x14, 0x90, 0x98, 0x9c,
	0x9d, 0x98, 0x9e, 0x2a, 0x24, 0xc2, 0xc5, 0x0a, 0xd6, 0x24, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19,
	0x04, 0xe1, 0x08, 0x29, 0x73, 0xf1, 0x96, 0xa5, 0x16, 0x65, 0xa6, 0x55, 0x66, 0xe6, 0xa5, 0xc7,
	0x67, 0xa7, 0x56, 0x4a, 0x30, 0x81, 0x65, 0x79, 0xe0, 0x82, 0xde, 0xa9, 0x95, 0x4e, 0x3e, 0x27,
	0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c,
	0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x65, 0x94, 0x9e, 0x59, 0x92, 0x51, 0x9a,
	0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x9f, 0x05, 0xb2, 0x28, 0xc7, 0x27, 0x31, 0xa9, 0x58, 0x1f, 0xe2,
	0x20, 0x5d, 0x88, 0xa3, 0x2b, 0xe0, 0xce, 0x2e, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0xbb,
	0xda, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x7f, 0xf6, 0x9b, 0xe9, 0xdb, 0x00, 0x00, 0x00,
}

func (m *ProofPackage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProofPackage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProofPackage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerifyingKey) > 0 {
		i -= len(m.VerifyingKey)
		copy(dAtA[i:], m.VerifyingKey)
		i = encodeVarintZkproof(dAtA, i, uint64(len(m.VerifyingKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintZkproof(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintZkproof(dAtA []byte, offset int, v uint64) int {
	offset -= sovZkproof(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProofPackage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovZkproof(uint64(l))
	}
	l = len(m.VerifyingKey)
	if l > 0 {
		n += 1 + l + sovZkproof(uint64(l))
	}
	return n
}

func sovZkproof(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZkproof(x uint64) (n int) {
	return sovZkproof(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProofPackage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZkproof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProofPackage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProofPackage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkproof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkproof
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkproof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyingKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkproof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkproof
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkproof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifyingKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZkproof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZkproof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZkproof(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZkproof
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZkproof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZkproof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZkproof
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZkproof
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZkproof
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZkproof        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZkproof          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZkproof = fmt.Errorf("proto: unexpected end of group")
)
