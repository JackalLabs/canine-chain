// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canine_chain/storage/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgPostContract struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Merkle   string `protobuf:"bytes,2,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Signee   string `protobuf:"bytes,3,opt,name=signee,proto3" json:"signee,omitempty"`
	Filesize string `protobuf:"bytes,4,opt,name=filesize,proto3" json:"filesize,omitempty"`
	Fid      string `protobuf:"bytes,5,opt,name=fid,proto3" json:"fid,omitempty"`
}

func (m *MsgPostContract) Reset()         { *m = MsgPostContract{} }
func (m *MsgPostContract) String() string { return proto.CompactTextString(m) }
func (*MsgPostContract) ProtoMessage()    {}
func (*MsgPostContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{0}
}
func (m *MsgPostContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostContract.Merge(m, src)
}
func (m *MsgPostContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostContract proto.InternalMessageInfo

func (m *MsgPostContract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPostContract) GetMerkle() string {
	if m != nil {
		return m.Merkle
	}
	return ""
}

func (m *MsgPostContract) GetSignee() string {
	if m != nil {
		return m.Signee
	}
	return ""
}

func (m *MsgPostContract) GetFilesize() string {
	if m != nil {
		return m.Filesize
	}
	return ""
}

func (m *MsgPostContract) GetFid() string {
	if m != nil {
		return m.Fid
	}
	return ""
}

type MsgPostContractResponse struct {
}

func (m *MsgPostContractResponse) Reset()         { *m = MsgPostContractResponse{} }
func (m *MsgPostContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPostContractResponse) ProtoMessage()    {}
func (*MsgPostContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{1}
}
func (m *MsgPostContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostContractResponse.Merge(m, src)
}
func (m *MsgPostContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostContractResponse proto.InternalMessageInfo

type MsgPostproof struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Item     string `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	Hashlist string `protobuf:"bytes,3,opt,name=hashlist,proto3" json:"hashlist,omitempty"`
	Cid      string `protobuf:"bytes,4,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *MsgPostproof) Reset()         { *m = MsgPostproof{} }
func (m *MsgPostproof) String() string { return proto.CompactTextString(m) }
func (*MsgPostproof) ProtoMessage()    {}
func (*MsgPostproof) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{2}
}
func (m *MsgPostproof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostproof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostproof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostproof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostproof.Merge(m, src)
}
func (m *MsgPostproof) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostproof) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostproof.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostproof proto.InternalMessageInfo

func (m *MsgPostproof) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPostproof) GetItem() string {
	if m != nil {
		return m.Item
	}
	return ""
}

func (m *MsgPostproof) GetHashlist() string {
	if m != nil {
		return m.Hashlist
	}
	return ""
}

func (m *MsgPostproof) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type MsgPostproofResponse struct {
	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (m *MsgPostproofResponse) Reset()         { *m = MsgPostproofResponse{} }
func (m *MsgPostproofResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPostproofResponse) ProtoMessage()    {}
func (*MsgPostproofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{3}
}
func (m *MsgPostproofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostproofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostproofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostproofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostproofResponse.Merge(m, src)
}
func (m *MsgPostproofResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostproofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostproofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostproofResponse proto.InternalMessageInfo

func (m *MsgPostproofResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *MsgPostproofResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type MsgPostZKProof struct {
	Creator  string       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Package  ProofPackage `protobuf:"bytes,2,opt,name=package,proto3" json:"package"`
	Hash     string       `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Hashlist string       `protobuf:"bytes,4,opt,name=hashlist,proto3" json:"hashlist,omitempty"`
	Cid      string       `protobuf:"bytes,5,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *MsgPostZKProof) Reset()         { *m = MsgPostZKProof{} }
func (m *MsgPostZKProof) String() string { return proto.CompactTextString(m) }
func (*MsgPostZKProof) ProtoMessage()    {}
func (*MsgPostZKProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{4}
}
func (m *MsgPostZKProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostZKProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostZKProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostZKProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostZKProof.Merge(m, src)
}
func (m *MsgPostZKProof) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostZKProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostZKProof.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostZKProof proto.InternalMessageInfo

func (m *MsgPostZKProof) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPostZKProof) GetPackage() ProofPackage {
	if m != nil {
		return m.Package
	}
	return ProofPackage{}
}

func (m *MsgPostZKProof) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *MsgPostZKProof) GetHashlist() string {
	if m != nil {
		return m.Hashlist
	}
	return ""
}

func (m *MsgPostZKProof) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type MsgPostZKProofResponse struct {
	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (m *MsgPostZKProofResponse) Reset()         { *m = MsgPostZKProofResponse{} }
func (m *MsgPostZKProofResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPostZKProofResponse) ProtoMessage()    {}
func (*MsgPostZKProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{5}
}
func (m *MsgPostZKProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostZKProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostZKProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostZKProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostZKProofResponse.Merge(m, src)
}
func (m *MsgPostZKProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostZKProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostZKProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostZKProofResponse proto.InternalMessageInfo

func (m *MsgPostZKProofResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *MsgPostZKProofResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type MsgSignContract struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Cid     string `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
	PayOnce bool   `protobuf:"varint,3,opt,name=pay_once,json=payOnce,proto3" json:"pay_once,omitempty"`
}

func (m *MsgSignContract) Reset()         { *m = MsgSignContract{} }
func (m *MsgSignContract) String() string { return proto.CompactTextString(m) }
func (*MsgSignContract) ProtoMessage()    {}
func (*MsgSignContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{6}
}
func (m *MsgSignContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignContract.Merge(m, src)
}
func (m *MsgSignContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignContract proto.InternalMessageInfo

func (m *MsgSignContract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSignContract) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *MsgSignContract) GetPayOnce() bool {
	if m != nil {
		return m.PayOnce
	}
	return false
}

type MsgSignContractResponse struct {
}

func (m *MsgSignContractResponse) Reset()         { *m = MsgSignContractResponse{} }
func (m *MsgSignContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignContractResponse) ProtoMessage()    {}
func (*MsgSignContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{7}
}
func (m *MsgSignContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignContractResponse.Merge(m, src)
}
func (m *MsgSignContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignContractResponse proto.InternalMessageInfo

type MsgSetProviderIP struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *MsgSetProviderIP) Reset()         { *m = MsgSetProviderIP{} }
func (m *MsgSetProviderIP) String() string { return proto.CompactTextString(m) }
func (*MsgSetProviderIP) ProtoMessage()    {}
func (*MsgSetProviderIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{8}
}
func (m *MsgSetProviderIP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetProviderIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetProviderIP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetProviderIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetProviderIP.Merge(m, src)
}
func (m *MsgSetProviderIP) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetProviderIP) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetProviderIP.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetProviderIP proto.InternalMessageInfo

func (m *MsgSetProviderIP) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetProviderIP) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type MsgSetProviderIPResponse struct {
}

func (m *MsgSetProviderIPResponse) Reset()         { *m = MsgSetProviderIPResponse{} }
func (m *MsgSetProviderIPResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetProviderIPResponse) ProtoMessage()    {}
func (*MsgSetProviderIPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{9}
}
func (m *MsgSetProviderIPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetProviderIPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetProviderIPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetProviderIPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetProviderIPResponse.Merge(m, src)
}
func (m *MsgSetProviderIPResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetProviderIPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetProviderIPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetProviderIPResponse proto.InternalMessageInfo

type MsgSetProviderKeybase struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Keybase string `protobuf:"bytes,2,opt,name=keybase,proto3" json:"keybase,omitempty"`
}

func (m *MsgSetProviderKeybase) Reset()         { *m = MsgSetProviderKeybase{} }
func (m *MsgSetProviderKeybase) String() string { return proto.CompactTextString(m) }
func (*MsgSetProviderKeybase) ProtoMessage()    {}
func (*MsgSetProviderKeybase) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{10}
}
func (m *MsgSetProviderKeybase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetProviderKeybase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetProviderKeybase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetProviderKeybase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetProviderKeybase.Merge(m, src)
}
func (m *MsgSetProviderKeybase) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetProviderKeybase) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetProviderKeybase.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetProviderKeybase proto.InternalMessageInfo

func (m *MsgSetProviderKeybase) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetProviderKeybase) GetKeybase() string {
	if m != nil {
		return m.Keybase
	}
	return ""
}

type MsgSetProviderKeybaseResponse struct {
}

func (m *MsgSetProviderKeybaseResponse) Reset()         { *m = MsgSetProviderKeybaseResponse{} }
func (m *MsgSetProviderKeybaseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetProviderKeybaseResponse) ProtoMessage()    {}
func (*MsgSetProviderKeybaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{11}
}
func (m *MsgSetProviderKeybaseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetProviderKeybaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetProviderKeybaseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetProviderKeybaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetProviderKeybaseResponse.Merge(m, src)
}
func (m *MsgSetProviderKeybaseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetProviderKeybaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetProviderKeybaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetProviderKeybaseResponse proto.InternalMessageInfo

type MsgSetProviderTotalspace struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Space   string `protobuf:"bytes,2,opt,name=space,proto3" json:"space,omitempty"`
}

func (m *MsgSetProviderTotalspace) Reset()         { *m = MsgSetProviderTotalspace{} }
func (m *MsgSetProviderTotalspace) String() string { return proto.CompactTextString(m) }
func (*MsgSetProviderTotalspace) ProtoMessage()    {}
func (*MsgSetProviderTotalspace) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{12}
}
func (m *MsgSetProviderTotalspace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetProviderTotalspace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetProviderTotalspace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetProviderTotalspace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetProviderTotalspace.Merge(m, src)
}
func (m *MsgSetProviderTotalspace) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetProviderTotalspace) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetProviderTotalspace.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetProviderTotalspace proto.InternalMessageInfo

func (m *MsgSetProviderTotalspace) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetProviderTotalspace) GetSpace() string {
	if m != nil {
		return m.Space
	}
	return ""
}

type MsgSetProviderTotalspaceResponse struct {
}

func (m *MsgSetProviderTotalspaceResponse) Reset()         { *m = MsgSetProviderTotalspaceResponse{} }
func (m *MsgSetProviderTotalspaceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetProviderTotalspaceResponse) ProtoMessage()    {}
func (*MsgSetProviderTotalspaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{13}
}
func (m *MsgSetProviderTotalspaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetProviderTotalspaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetProviderTotalspaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetProviderTotalspaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetProviderTotalspaceResponse.Merge(m, src)
}
func (m *MsgSetProviderTotalspaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetProviderTotalspaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetProviderTotalspaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetProviderTotalspaceResponse proto.InternalMessageInfo

type MsgAddClaimer struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ClaimAddress string `protobuf:"bytes,2,opt,name=claim_address,json=claimAddress,proto3" json:"claim_address,omitempty"`
}

func (m *MsgAddClaimer) Reset()         { *m = MsgAddClaimer{} }
func (m *MsgAddClaimer) String() string { return proto.CompactTextString(m) }
func (*MsgAddClaimer) ProtoMessage()    {}
func (*MsgAddClaimer) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{14}
}
func (m *MsgAddClaimer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddClaimer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddClaimer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddClaimer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddClaimer.Merge(m, src)
}
func (m *MsgAddClaimer) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddClaimer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddClaimer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddClaimer proto.InternalMessageInfo

func (m *MsgAddClaimer) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddClaimer) GetClaimAddress() string {
	if m != nil {
		return m.ClaimAddress
	}
	return ""
}

type MsgAddClaimerResponse struct {
}

func (m *MsgAddClaimerResponse) Reset()         { *m = MsgAddClaimerResponse{} }
func (m *MsgAddClaimerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddClaimerResponse) ProtoMessage()    {}
func (*MsgAddClaimerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{15}
}
func (m *MsgAddClaimerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddClaimerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddClaimerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddClaimerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddClaimerResponse.Merge(m, src)
}
func (m *MsgAddClaimerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddClaimerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddClaimerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddClaimerResponse proto.InternalMessageInfo

type MsgRemoveClaimer struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ClaimAddress string `protobuf:"bytes,2,opt,name=claim_address,json=claimAddress,proto3" json:"claim_address,omitempty"`
}

func (m *MsgRemoveClaimer) Reset()         { *m = MsgRemoveClaimer{} }
func (m *MsgRemoveClaimer) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveClaimer) ProtoMessage()    {}
func (*MsgRemoveClaimer) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{16}
}
func (m *MsgRemoveClaimer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveClaimer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveClaimer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveClaimer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveClaimer.Merge(m, src)
}
func (m *MsgRemoveClaimer) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveClaimer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveClaimer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveClaimer proto.InternalMessageInfo

func (m *MsgRemoveClaimer) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveClaimer) GetClaimAddress() string {
	if m != nil {
		return m.ClaimAddress
	}
	return ""
}

type MsgRemoveClaimerResponse struct {
}

func (m *MsgRemoveClaimerResponse) Reset()         { *m = MsgRemoveClaimerResponse{} }
func (m *MsgRemoveClaimerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveClaimerResponse) ProtoMessage()    {}
func (*MsgRemoveClaimerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{17}
}
func (m *MsgRemoveClaimerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveClaimerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveClaimerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveClaimerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveClaimerResponse.Merge(m, src)
}
func (m *MsgRemoveClaimerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveClaimerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveClaimerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveClaimerResponse proto.InternalMessageInfo

type MsgInitProvider struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Ip         string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Keybase    string `protobuf:"bytes,3,opt,name=keybase,proto3" json:"keybase,omitempty"`
	Totalspace string `protobuf:"bytes,4,opt,name=totalspace,proto3" json:"totalspace,omitempty"`
}

func (m *MsgInitProvider) Reset()         { *m = MsgInitProvider{} }
func (m *MsgInitProvider) String() string { return proto.CompactTextString(m) }
func (*MsgInitProvider) ProtoMessage()    {}
func (*MsgInitProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{18}
}
func (m *MsgInitProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitProvider.Merge(m, src)
}
func (m *MsgInitProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitProvider proto.InternalMessageInfo

func (m *MsgInitProvider) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgInitProvider) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *MsgInitProvider) GetKeybase() string {
	if m != nil {
		return m.Keybase
	}
	return ""
}

func (m *MsgInitProvider) GetTotalspace() string {
	if m != nil {
		return m.Totalspace
	}
	return ""
}

type MsgInitProviderResponse struct {
}

func (m *MsgInitProviderResponse) Reset()         { *m = MsgInitProviderResponse{} }
func (m *MsgInitProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInitProviderResponse) ProtoMessage()    {}
func (*MsgInitProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{19}
}
func (m *MsgInitProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitProviderResponse.Merge(m, src)
}
func (m *MsgInitProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitProviderResponse proto.InternalMessageInfo

type MsgCancelContract struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Cid     string `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *MsgCancelContract) Reset()         { *m = MsgCancelContract{} }
func (m *MsgCancelContract) String() string { return proto.CompactTextString(m) }
func (*MsgCancelContract) ProtoMessage()    {}
func (*MsgCancelContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{20}
}
func (m *MsgCancelContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelContract.Merge(m, src)
}
func (m *MsgCancelContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelContract proto.InternalMessageInfo

func (m *MsgCancelContract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCancelContract) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type MsgCancelContractResponse struct {
}

func (m *MsgCancelContractResponse) Reset()         { *m = MsgCancelContractResponse{} }
func (m *MsgCancelContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelContractResponse) ProtoMessage()    {}
func (*MsgCancelContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{21}
}
func (m *MsgCancelContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelContractResponse.Merge(m, src)
}
func (m *MsgCancelContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelContractResponse proto.InternalMessageInfo

type MsgBuyStorage struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ForAddress   string `protobuf:"bytes,2,opt,name=for_address,json=forAddress,proto3" json:"for_address,omitempty"`
	Duration     string `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Bytes        string `protobuf:"bytes,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
	PaymentDenom string `protobuf:"bytes,5,opt,name=payment_denom,json=paymentDenom,proto3" json:"payment_denom,omitempty"`
}

func (m *MsgBuyStorage) Reset()         { *m = MsgBuyStorage{} }
func (m *MsgBuyStorage) String() string { return proto.CompactTextString(m) }
func (*MsgBuyStorage) ProtoMessage()    {}
func (*MsgBuyStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{22}
}
func (m *MsgBuyStorage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyStorage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyStorage.Merge(m, src)
}
func (m *MsgBuyStorage) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyStorage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyStorage proto.InternalMessageInfo

func (m *MsgBuyStorage) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBuyStorage) GetForAddress() string {
	if m != nil {
		return m.ForAddress
	}
	return ""
}

func (m *MsgBuyStorage) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *MsgBuyStorage) GetBytes() string {
	if m != nil {
		return m.Bytes
	}
	return ""
}

func (m *MsgBuyStorage) GetPaymentDenom() string {
	if m != nil {
		return m.PaymentDenom
	}
	return ""
}

type MsgBuyStorageResponse struct {
}

func (m *MsgBuyStorageResponse) Reset()         { *m = MsgBuyStorageResponse{} }
func (m *MsgBuyStorageResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBuyStorageResponse) ProtoMessage()    {}
func (*MsgBuyStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{23}
}
func (m *MsgBuyStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyStorageResponse.Merge(m, src)
}
func (m *MsgBuyStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyStorageResponse proto.InternalMessageInfo

type MsgClaimStray struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Cid        string `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
	ForAddress string `protobuf:"bytes,3,opt,name=for_address,json=forAddress,proto3" json:"for_address,omitempty"`
}

func (m *MsgClaimStray) Reset()         { *m = MsgClaimStray{} }
func (m *MsgClaimStray) String() string { return proto.CompactTextString(m) }
func (*MsgClaimStray) ProtoMessage()    {}
func (*MsgClaimStray) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{24}
}
func (m *MsgClaimStray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimStray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimStray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimStray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimStray.Merge(m, src)
}
func (m *MsgClaimStray) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimStray) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimStray.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimStray proto.InternalMessageInfo

func (m *MsgClaimStray) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimStray) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *MsgClaimStray) GetForAddress() string {
	if m != nil {
		return m.ForAddress
	}
	return ""
}

type MsgClaimStrayResponse struct {
}

func (m *MsgClaimStrayResponse) Reset()         { *m = MsgClaimStrayResponse{} }
func (m *MsgClaimStrayResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimStrayResponse) ProtoMessage()    {}
func (*MsgClaimStrayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{25}
}
func (m *MsgClaimStrayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimStrayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimStrayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimStrayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimStrayResponse.Merge(m, src)
}
func (m *MsgClaimStrayResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimStrayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimStrayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimStrayResponse proto.InternalMessageInfo

type MsgUpgradeStorage struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ForAddress   string `protobuf:"bytes,2,opt,name=for_address,json=forAddress,proto3" json:"for_address,omitempty"`
	Duration     string `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Bytes        string `protobuf:"bytes,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
	PaymentDenom string `protobuf:"bytes,5,opt,name=payment_denom,json=paymentDenom,proto3" json:"payment_denom,omitempty"`
}

func (m *MsgUpgradeStorage) Reset()         { *m = MsgUpgradeStorage{} }
func (m *MsgUpgradeStorage) String() string { return proto.CompactTextString(m) }
func (*MsgUpgradeStorage) ProtoMessage()    {}
func (*MsgUpgradeStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{26}
}
func (m *MsgUpgradeStorage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpgradeStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpgradeStorage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpgradeStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpgradeStorage.Merge(m, src)
}
func (m *MsgUpgradeStorage) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpgradeStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpgradeStorage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpgradeStorage proto.InternalMessageInfo

func (m *MsgUpgradeStorage) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpgradeStorage) GetForAddress() string {
	if m != nil {
		return m.ForAddress
	}
	return ""
}

func (m *MsgUpgradeStorage) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *MsgUpgradeStorage) GetBytes() string {
	if m != nil {
		return m.Bytes
	}
	return ""
}

func (m *MsgUpgradeStorage) GetPaymentDenom() string {
	if m != nil {
		return m.PaymentDenom
	}
	return ""
}

type MsgUpgradeStorageResponse struct {
}

func (m *MsgUpgradeStorageResponse) Reset()         { *m = MsgUpgradeStorageResponse{} }
func (m *MsgUpgradeStorageResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpgradeStorageResponse) ProtoMessage()    {}
func (*MsgUpgradeStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{27}
}
func (m *MsgUpgradeStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpgradeStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpgradeStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpgradeStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpgradeStorageResponse.Merge(m, src)
}
func (m *MsgUpgradeStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpgradeStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpgradeStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpgradeStorageResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgPostContract)(nil), "canine_chain.storage.MsgPostContract")
	proto.RegisterType((*MsgPostContractResponse)(nil), "canine_chain.storage.MsgPostContractResponse")
	proto.RegisterType((*MsgPostproof)(nil), "canine_chain.storage.MsgPostproof")
	proto.RegisterType((*MsgPostproofResponse)(nil), "canine_chain.storage.MsgPostproofResponse")
	proto.RegisterType((*MsgPostZKProof)(nil), "canine_chain.storage.MsgPostZKProof")
	proto.RegisterType((*MsgPostZKProofResponse)(nil), "canine_chain.storage.MsgPostZKProofResponse")
	proto.RegisterType((*MsgSignContract)(nil), "canine_chain.storage.MsgSignContract")
	proto.RegisterType((*MsgSignContractResponse)(nil), "canine_chain.storage.MsgSignContractResponse")
	proto.RegisterType((*MsgSetProviderIP)(nil), "canine_chain.storage.MsgSetProviderIP")
	proto.RegisterType((*MsgSetProviderIPResponse)(nil), "canine_chain.storage.MsgSetProviderIPResponse")
	proto.RegisterType((*MsgSetProviderKeybase)(nil), "canine_chain.storage.MsgSetProviderKeybase")
	proto.RegisterType((*MsgSetProviderKeybaseResponse)(nil), "canine_chain.storage.MsgSetProviderKeybaseResponse")
	proto.RegisterType((*MsgSetProviderTotalspace)(nil), "canine_chain.storage.MsgSetProviderTotalspace")
	proto.RegisterType((*MsgSetProviderTotalspaceResponse)(nil), "canine_chain.storage.MsgSetProviderTotalspaceResponse")
	proto.RegisterType((*MsgAddClaimer)(nil), "canine_chain.storage.MsgAddClaimer")
	proto.RegisterType((*MsgAddClaimerResponse)(nil), "canine_chain.storage.MsgAddClaimerResponse")
	proto.RegisterType((*MsgRemoveClaimer)(nil), "canine_chain.storage.MsgRemoveClaimer")
	proto.RegisterType((*MsgRemoveClaimerResponse)(nil), "canine_chain.storage.MsgRemoveClaimerResponse")
	proto.RegisterType((*MsgInitProvider)(nil), "canine_chain.storage.MsgInitProvider")
	proto.RegisterType((*MsgInitProviderResponse)(nil), "canine_chain.storage.MsgInitProviderResponse")
	proto.RegisterType((*MsgCancelContract)(nil), "canine_chain.storage.MsgCancelContract")
	proto.RegisterType((*MsgCancelContractResponse)(nil), "canine_chain.storage.MsgCancelContractResponse")
	proto.RegisterType((*MsgBuyStorage)(nil), "canine_chain.storage.MsgBuyStorage")
	proto.RegisterType((*MsgBuyStorageResponse)(nil), "canine_chain.storage.MsgBuyStorageResponse")
	proto.RegisterType((*MsgClaimStray)(nil), "canine_chain.storage.MsgClaimStray")
	proto.RegisterType((*MsgClaimStrayResponse)(nil), "canine_chain.storage.MsgClaimStrayResponse")
	proto.RegisterType((*MsgUpgradeStorage)(nil), "canine_chain.storage.MsgUpgradeStorage")
	proto.RegisterType((*MsgUpgradeStorageResponse)(nil), "canine_chain.storage.MsgUpgradeStorageResponse")
}

func init() { proto.RegisterFile("canine_chain/storage/tx.proto", fileDescriptor_2194ba0b2c3d6a97) }

var fileDescriptor_2194ba0b2c3d6a97 = []byte{
	// 1012 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4d, 0x6f, 0xdc, 0x44,
	0x18, 0xce, 0x66, 0x93, 0x26, 0x7d, 0xb3, 0x09, 0xc5, 0x4a, 0xda, 0x8d, 0x51, 0x37, 0x95, 0xcb,
	0x97, 0x28, 0xdd, 0x95, 0x52, 0x89, 0x13, 0x12, 0x4a, 0xc2, 0xa5, 0xa4, 0x0b, 0xcb, 0xa6, 0x20,
	0x54, 0x10, 0xd1, 0xac, 0x3d, 0xeb, 0x38, 0xd9, 0xf5, 0x58, 0x33, 0xb3, 0x51, 0xb7, 0x17, 0xce,
	0xdc, 0xf8, 0x0b, 0x1c, 0xb8, 0xf3, 0x33, 0x2a, 0x4e, 0x3d, 0x72, 0x42, 0x28, 0xf9, 0x23, 0x68,
	0x3e, 0x3c, 0xfe, 0x88, 0xed, 0x3a, 0xa8, 0x87, 0xde, 0x3c, 0x33, 0x8f, 0x9f, 0xe7, 0xfd, 0xf2,
	0xfb, 0x8e, 0xe1, 0xae, 0x8b, 0xc2, 0x20, 0xc4, 0xc7, 0xee, 0x09, 0x0a, 0xc2, 0x1e, 0xe3, 0x84,
	0x22, 0x1f, 0xf7, 0xf8, 0xf3, 0x6e, 0x44, 0x09, 0x27, 0xd6, 0x66, 0xfa, 0xb8, 0xab, 0x8f, 0xed,
	0x4d, 0x9f, 0xf8, 0x44, 0x02, 0x7a, 0xe2, 0x49, 0x61, 0x6d, 0xa7, 0x90, 0xea, 0xc5, 0x59, 0x44,
	0x09, 0x19, 0x2b, 0x8c, 0xf3, 0x6b, 0x03, 0xde, 0xe9, 0x33, 0x7f, 0x40, 0x18, 0x3f, 0x20, 0x21,
	0xa7, 0xc8, 0xe5, 0x56, 0x1b, 0x56, 0x5c, 0x8a, 0x11, 0x27, 0xb4, 0xdd, 0xb8, 0xd7, 0xf8, 0xf8,
	0xe6, 0x30, 0x5e, 0x5a, 0xb7, 0xe1, 0xc6, 0x14, 0xd3, 0xb3, 0x09, 0x6e, 0x2f, 0xca, 0x03, 0xbd,
	0x12, 0xfb, 0x2c, 0xf0, 0x43, 0x8c, 0xdb, 0x4d, 0xb5, 0xaf, 0x56, 0x96, 0x0d, 0xab, 0xe3, 0x60,
	0x82, 0x59, 0xf0, 0x02, 0xb7, 0x97, 0xe4, 0x89, 0x59, 0x5b, 0xb7, 0xa0, 0x39, 0x0e, 0xbc, 0xf6,
	0xb2, 0xdc, 0x16, 0x8f, 0xce, 0x36, 0xdc, 0xc9, 0x99, 0x32, 0xc4, 0x2c, 0x22, 0x21, 0xc3, 0xce,
	0x29, 0xb4, 0xf4, 0x91, 0x34, 0xbe, 0xc2, 0x44, 0x0b, 0x96, 0x02, 0x8e, 0xa7, 0xda, 0x40, 0xf9,
	0x2c, 0xcc, 0x38, 0x41, 0xec, 0x64, 0x12, 0x30, 0xae, 0x0d, 0x34, 0x6b, 0x61, 0x86, 0x1b, 0x78,
	0xda, 0x3a, 0xf1, 0xe8, 0x3c, 0x85, 0xcd, 0xb4, 0x56, 0x6c, 0x83, 0xd0, 0x64, 0x33, 0xd7, 0xc5,
	0x8c, 0x49, 0xcd, 0xd5, 0x61, 0xbc, 0xb4, 0x1c, 0x68, 0x61, 0x4a, 0x09, 0xed, 0x63, 0xc6, 0x90,
	0x1f, 0x07, 0x27, 0xb3, 0xe7, 0xfc, 0xd9, 0x80, 0x0d, 0x4d, 0xfb, 0xec, 0x70, 0xf0, 0x1a, 0x27,
	0xf6, 0x61, 0x25, 0x42, 0xee, 0x59, 0xcc, 0xb5, 0xb6, 0xeb, 0x74, 0x8b, 0xf2, 0xde, 0x95, 0x3c,
	0x03, 0x85, 0xdc, 0x5f, 0x7a, 0xf9, 0xcf, 0xce, 0xc2, 0x30, 0x7e, 0x51, 0x04, 0x42, 0x38, 0xa9,
	0x1d, 0x96, 0xcf, 0x99, 0x40, 0x2c, 0x15, 0x07, 0x62, 0x39, 0x09, 0xc4, 0xf7, 0x70, 0x3b, 0x6b,
	0xf1, 0x1b, 0x0a, 0xc5, 0x0f, 0xb2, 0xe4, 0x8e, 0x02, 0x3f, 0xac, 0x51, 0x72, 0xda, 0xac, 0x45,
	0x63, 0x96, 0xb5, 0x0d, 0xab, 0x11, 0x9a, 0x1f, 0x93, 0xd0, 0x55, 0xe5, 0xb6, 0x2a, 0x7c, 0x9e,
	0x7f, 0x13, 0xba, 0x58, 0x57, 0x50, 0x9a, 0xd9, 0x54, 0xd0, 0xe7, 0x70, 0x4b, 0x1c, 0x61, 0x3e,
	0xa0, 0xe4, 0x3c, 0xf0, 0x30, 0x7d, 0x3c, 0xa8, 0x50, 0xdd, 0x80, 0xc5, 0x20, 0xd2, 0xa2, 0x8b,
	0x41, 0xe4, 0xd8, 0xd0, 0xce, 0xbf, 0x6d, 0x98, 0x0f, 0x61, 0x2b, 0x7b, 0x76, 0x88, 0xe7, 0x23,
	0xa4, 0xa2, 0x54, 0x42, 0xdf, 0x86, 0x95, 0x33, 0x05, 0xd2, 0x1a, 0xf1, 0xd2, 0xd9, 0x81, 0xbb,
	0x85, 0x64, 0x46, 0xed, 0xab, 0xbc, 0x25, 0x4f, 0x09, 0x47, 0x13, 0x16, 0x21, 0xb7, 0x4a, 0x70,
	0x13, 0x96, 0x25, 0x44, 0xcb, 0xa9, 0x85, 0xe3, 0xc0, 0xbd, 0x32, 0x2e, 0xa3, 0xf7, 0x35, 0xac,
	0xf7, 0x99, 0xbf, 0xe7, 0x79, 0x07, 0x13, 0x14, 0x4c, 0x31, 0xad, 0x10, 0xb9, 0x0f, 0xeb, 0xae,
	0x00, 0x1d, 0x23, 0xcf, 0xa3, 0xa2, 0x36, 0x74, 0xf2, 0xe5, 0xe6, 0x9e, 0xda, 0x73, 0xee, 0xc8,
	0x68, 0x25, 0x7c, 0x46, 0xe8, 0x5b, 0x99, 0xa0, 0x21, 0x9e, 0x92, 0x73, 0xfc, 0x86, 0xb4, 0x54,
	0xd6, 0x32, 0x94, 0x46, 0x6e, 0x26, 0x8b, 0xf0, 0x71, 0x18, 0x18, 0xe7, 0xeb, 0x97, 0x43, 0x3a,
	0x7f, 0xcd, 0x4c, 0xfe, 0xac, 0x0e, 0x00, 0x37, 0x41, 0xd4, 0xdf, 0x58, 0x6a, 0x47, 0x57, 0x68,
	0x5a, 0xd6, 0x58, 0xf4, 0x05, 0xbc, 0xdb, 0x67, 0xfe, 0x01, 0x0a, 0x5d, 0x3c, 0xf9, 0x3f, 0x1f,
	0x86, 0xf3, 0x1e, 0x6c, 0x5f, 0x21, 0x30, 0xec, 0xbf, 0x37, 0x64, 0x22, 0xf7, 0x67, 0xf3, 0x23,
	0xd5, 0x3c, 0x2a, 0xa8, 0x77, 0x60, 0x6d, 0x4c, 0x68, 0x2e, 0xb4, 0x30, 0x26, 0x54, 0x07, 0x56,
	0xf4, 0x11, 0x6f, 0x46, 0x11, 0x0f, 0x48, 0x18, 0x37, 0xd4, 0x78, 0x2d, 0x4a, 0x6d, 0x34, 0xe7,
	0x98, 0x69, 0xe7, 0xd5, 0x42, 0xe4, 0x2b, 0x42, 0xf3, 0x29, 0x0e, 0xf9, 0xb1, 0x87, 0x43, 0x32,
	0xd5, 0x7d, 0xa6, 0xa5, 0x37, 0xbf, 0x14, 0x7b, 0xba, 0x36, 0x12, 0x13, 0x8d, 0xf1, 0x3f, 0x49,
	0xdb, 0x65, 0x0a, 0x8f, 0x38, 0x45, 0xf3, 0x6b, 0xf5, 0x8b, 0x9c, 0x37, 0xcd, 0xbc, 0x37, 0x5a,
	0x36, 0x61, 0x37, 0xb2, 0x7f, 0x34, 0x64, 0x4a, 0xbe, 0x8b, 0x7c, 0x8a, 0x3c, 0xfc, 0xf6, 0xc6,
	0x4d, 0x25, 0x3e, 0x6b, 0x66, 0xec, 0xc4, 0xee, 0x5f, 0x6b, 0xd0, 0xec, 0x33, 0xdf, 0xf2, 0xa0,
	0x95, 0x99, 0xf2, 0x1f, 0x14, 0x8f, 0x94, 0xdc, 0x04, 0xb6, 0x1f, 0xd6, 0x82, 0x99, 0xc9, 0xf0,
	0x23, 0xdc, 0x4c, 0xa6, 0xb4, 0x53, 0xf9, 0xae, 0xc4, 0xd8, 0x9f, 0xbc, 0x1e, 0x63, 0xc8, 0x3d,
	0x68, 0x65, 0xa6, 0x46, 0xb9, 0x0b, 0x69, 0x58, 0x85, 0x0b, 0x45, 0x93, 0xc2, 0xf2, 0x61, 0x3d,
	0x3b, 0x26, 0x3e, 0x2c, 0x7f, 0x3f, 0x8d, 0xb3, 0xbb, 0xf5, 0x70, 0x46, 0xe8, 0x1c, 0xac, 0x82,
	0xa9, 0xf1, 0xa0, 0x0e, 0x8b, 0x06, 0xdb, 0x8f, 0xae, 0x01, 0x36, 0xba, 0xbf, 0xc0, 0x56, 0xf1,
	0xfc, 0xa8, 0xe5, 0x40, 0x82, 0xb7, 0x3f, 0xbb, 0x1e, 0x3e, 0x9d, 0xc7, 0x4c, 0xe3, 0x2d, 0xcf,
	0x63, 0x1a, 0x56, 0x91, 0xc7, 0xa2, 0x7e, 0x6a, 0x9d, 0xc2, 0x46, 0xae, 0x99, 0x7e, 0x54, 0x4a,
	0x90, 0x05, 0xda, 0xbd, 0x9a, 0x40, 0xa3, 0xf5, 0x33, 0x40, 0xaa, 0xb3, 0xde, 0x2f, 0x7d, 0x3d,
	0x01, 0xd9, 0x0f, 0x6a, 0x80, 0xd2, 0xfc, 0xa9, 0xee, 0x57, 0xce, 0x9f, 0x80, 0x2a, 0xf8, 0xaf,
	0x76, 0x3a, 0x11, 0xab, 0x5c, 0x97, 0x2b, 0x8f, 0x55, 0x16, 0x58, 0x11, 0xab, 0xe2, 0x86, 0x64,
	0x8d, 0xc1, 0xda, 0xf3, 0xbc, 0x38, 0x5d, 0xf1, 0xa8, 0x2f, 0xf7, 0x29, 0xb9, 0x2b, 0x54, 0xf8,
	0x74, 0xf5, 0x42, 0x61, 0x11, 0xd8, 0x52, 0xa3, 0x3f, 0x2f, 0x55, 0xfe, 0x3d, 0x67, 0xae, 0x0a,
	0x15, 0xdf, 0x73, 0xe1, 0x95, 0xc2, 0x42, 0xb0, 0x96, 0xbe, 0xde, 0xbf, 0x5f, 0xd9, 0xd9, 0x34,
	0xca, 0xfe, 0xb4, 0x0e, 0x2a, 0x96, 0xd8, 0x7f, 0xf2, 0xf2, 0xa2, 0xd3, 0x78, 0x75, 0xd1, 0x69,
	0xfc, 0x7b, 0xd1, 0x69, 0xfc, 0x76, 0xd9, 0x59, 0x78, 0x75, 0xd9, 0x59, 0xf8, 0xfb, 0xb2, 0xb3,
	0xf0, 0x6c, 0xd7, 0x0f, 0xf8, 0xc9, 0x6c, 0xd4, 0x75, 0xc9, 0xb4, 0x77, 0x2a, 0x7e, 0x01, 0x26,
	0x4f, 0xd0, 0x88, 0xf5, 0x14, 0xf9, 0x43, 0xf5, 0x0b, 0xf8, 0x3c, 0xf9, 0x9f, 0x9c, 0x47, 0x98,
	0x8d, 0x6e, 0xc8, 0x7f, 0xc0, 0x47, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xa9, 0x4a, 0xc4,
	0x74, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	PostContract(ctx context.Context, in *MsgPostContract, opts ...grpc.CallOption) (*MsgPostContractResponse, error)
	Postproof(ctx context.Context, in *MsgPostproof, opts ...grpc.CallOption) (*MsgPostproofResponse, error)
	SignContract(ctx context.Context, in *MsgSignContract, opts ...grpc.CallOption) (*MsgSignContractResponse, error)
	SetProviderIP(ctx context.Context, in *MsgSetProviderIP, opts ...grpc.CallOption) (*MsgSetProviderIPResponse, error)
	SetProviderKeybase(ctx context.Context, in *MsgSetProviderKeybase, opts ...grpc.CallOption) (*MsgSetProviderKeybaseResponse, error)
	SetProviderTotalspace(ctx context.Context, in *MsgSetProviderTotalspace, opts ...grpc.CallOption) (*MsgSetProviderTotalspaceResponse, error)
	InitProvider(ctx context.Context, in *MsgInitProvider, opts ...grpc.CallOption) (*MsgInitProviderResponse, error)
	CancelContract(ctx context.Context, in *MsgCancelContract, opts ...grpc.CallOption) (*MsgCancelContractResponse, error)
	BuyStorage(ctx context.Context, in *MsgBuyStorage, opts ...grpc.CallOption) (*MsgBuyStorageResponse, error)
	ClaimStray(ctx context.Context, in *MsgClaimStray, opts ...grpc.CallOption) (*MsgClaimStrayResponse, error)
	UpgradeStorage(ctx context.Context, in *MsgUpgradeStorage, opts ...grpc.CallOption) (*MsgUpgradeStorageResponse, error)
	AddProviderClaimer(ctx context.Context, in *MsgAddClaimer, opts ...grpc.CallOption) (*MsgAddClaimerResponse, error)
	RemoveProviderClaimer(ctx context.Context, in *MsgRemoveClaimer, opts ...grpc.CallOption) (*MsgRemoveClaimerResponse, error)
	PostZKProof(ctx context.Context, in *MsgPostZKProof, opts ...grpc.CallOption) (*MsgPostZKProofResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) PostContract(ctx context.Context, in *MsgPostContract, opts ...grpc.CallOption) (*MsgPostContractResponse, error) {
	out := new(MsgPostContractResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/PostContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Postproof(ctx context.Context, in *MsgPostproof, opts ...grpc.CallOption) (*MsgPostproofResponse, error) {
	out := new(MsgPostproofResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/Postproof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SignContract(ctx context.Context, in *MsgSignContract, opts ...grpc.CallOption) (*MsgSignContractResponse, error) {
	out := new(MsgSignContractResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/SignContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetProviderIP(ctx context.Context, in *MsgSetProviderIP, opts ...grpc.CallOption) (*MsgSetProviderIPResponse, error) {
	out := new(MsgSetProviderIPResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/SetProviderIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetProviderKeybase(ctx context.Context, in *MsgSetProviderKeybase, opts ...grpc.CallOption) (*MsgSetProviderKeybaseResponse, error) {
	out := new(MsgSetProviderKeybaseResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/SetProviderKeybase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetProviderTotalspace(ctx context.Context, in *MsgSetProviderTotalspace, opts ...grpc.CallOption) (*MsgSetProviderTotalspaceResponse, error) {
	out := new(MsgSetProviderTotalspaceResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/SetProviderTotalspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitProvider(ctx context.Context, in *MsgInitProvider, opts ...grpc.CallOption) (*MsgInitProviderResponse, error) {
	out := new(MsgInitProviderResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/InitProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelContract(ctx context.Context, in *MsgCancelContract, opts ...grpc.CallOption) (*MsgCancelContractResponse, error) {
	out := new(MsgCancelContractResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/CancelContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BuyStorage(ctx context.Context, in *MsgBuyStorage, opts ...grpc.CallOption) (*MsgBuyStorageResponse, error) {
	out := new(MsgBuyStorageResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/BuyStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimStray(ctx context.Context, in *MsgClaimStray, opts ...grpc.CallOption) (*MsgClaimStrayResponse, error) {
	out := new(MsgClaimStrayResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/ClaimStray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpgradeStorage(ctx context.Context, in *MsgUpgradeStorage, opts ...grpc.CallOption) (*MsgUpgradeStorageResponse, error) {
	out := new(MsgUpgradeStorageResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/UpgradeStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddProviderClaimer(ctx context.Context, in *MsgAddClaimer, opts ...grpc.CallOption) (*MsgAddClaimerResponse, error) {
	out := new(MsgAddClaimerResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/AddProviderClaimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveProviderClaimer(ctx context.Context, in *MsgRemoveClaimer, opts ...grpc.CallOption) (*MsgRemoveClaimerResponse, error) {
	out := new(MsgRemoveClaimerResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/RemoveProviderClaimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PostZKProof(ctx context.Context, in *MsgPostZKProof, opts ...grpc.CallOption) (*MsgPostZKProofResponse, error) {
	out := new(MsgPostZKProofResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/PostZKProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	PostContract(context.Context, *MsgPostContract) (*MsgPostContractResponse, error)
	Postproof(context.Context, *MsgPostproof) (*MsgPostproofResponse, error)
	SignContract(context.Context, *MsgSignContract) (*MsgSignContractResponse, error)
	SetProviderIP(context.Context, *MsgSetProviderIP) (*MsgSetProviderIPResponse, error)
	SetProviderKeybase(context.Context, *MsgSetProviderKeybase) (*MsgSetProviderKeybaseResponse, error)
	SetProviderTotalspace(context.Context, *MsgSetProviderTotalspace) (*MsgSetProviderTotalspaceResponse, error)
	InitProvider(context.Context, *MsgInitProvider) (*MsgInitProviderResponse, error)
	CancelContract(context.Context, *MsgCancelContract) (*MsgCancelContractResponse, error)
	BuyStorage(context.Context, *MsgBuyStorage) (*MsgBuyStorageResponse, error)
	ClaimStray(context.Context, *MsgClaimStray) (*MsgClaimStrayResponse, error)
	UpgradeStorage(context.Context, *MsgUpgradeStorage) (*MsgUpgradeStorageResponse, error)
	AddProviderClaimer(context.Context, *MsgAddClaimer) (*MsgAddClaimerResponse, error)
	RemoveProviderClaimer(context.Context, *MsgRemoveClaimer) (*MsgRemoveClaimerResponse, error)
	PostZKProof(context.Context, *MsgPostZKProof) (*MsgPostZKProofResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) PostContract(ctx context.Context, req *MsgPostContract) (*MsgPostContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostContract not implemented")
}
func (*UnimplementedMsgServer) Postproof(ctx context.Context, req *MsgPostproof) (*MsgPostproofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Postproof not implemented")
}
func (*UnimplementedMsgServer) SignContract(ctx context.Context, req *MsgSignContract) (*MsgSignContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignContract not implemented")
}
func (*UnimplementedMsgServer) SetProviderIP(ctx context.Context, req *MsgSetProviderIP) (*MsgSetProviderIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProviderIP not implemented")
}
func (*UnimplementedMsgServer) SetProviderKeybase(ctx context.Context, req *MsgSetProviderKeybase) (*MsgSetProviderKeybaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProviderKeybase not implemented")
}
func (*UnimplementedMsgServer) SetProviderTotalspace(ctx context.Context, req *MsgSetProviderTotalspace) (*MsgSetProviderTotalspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProviderTotalspace not implemented")
}
func (*UnimplementedMsgServer) InitProvider(ctx context.Context, req *MsgInitProvider) (*MsgInitProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitProvider not implemented")
}
func (*UnimplementedMsgServer) CancelContract(ctx context.Context, req *MsgCancelContract) (*MsgCancelContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelContract not implemented")
}
func (*UnimplementedMsgServer) BuyStorage(ctx context.Context, req *MsgBuyStorage) (*MsgBuyStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyStorage not implemented")
}
func (*UnimplementedMsgServer) ClaimStray(ctx context.Context, req *MsgClaimStray) (*MsgClaimStrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimStray not implemented")
}
func (*UnimplementedMsgServer) UpgradeStorage(ctx context.Context, req *MsgUpgradeStorage) (*MsgUpgradeStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeStorage not implemented")
}
func (*UnimplementedMsgServer) AddProviderClaimer(ctx context.Context, req *MsgAddClaimer) (*MsgAddClaimerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProviderClaimer not implemented")
}
func (*UnimplementedMsgServer) RemoveProviderClaimer(ctx context.Context, req *MsgRemoveClaimer) (*MsgRemoveClaimerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProviderClaimer not implemented")
}
func (*UnimplementedMsgServer) PostZKProof(ctx context.Context, req *MsgPostZKProof) (*MsgPostZKProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostZKProof not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_PostContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPostContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PostContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/PostContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PostContract(ctx, req.(*MsgPostContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Postproof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPostproof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Postproof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/Postproof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Postproof(ctx, req.(*MsgPostproof))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SignContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/SignContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignContract(ctx, req.(*MsgSignContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetProviderIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetProviderIP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetProviderIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/SetProviderIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetProviderIP(ctx, req.(*MsgSetProviderIP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetProviderKeybase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetProviderKeybase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetProviderKeybase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/SetProviderKeybase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetProviderKeybase(ctx, req.(*MsgSetProviderKeybase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetProviderTotalspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetProviderTotalspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetProviderTotalspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/SetProviderTotalspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetProviderTotalspace(ctx, req.(*MsgSetProviderTotalspace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/InitProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitProvider(ctx, req.(*MsgInitProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/CancelContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelContract(ctx, req.(*MsgCancelContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BuyStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBuyStorage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BuyStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/BuyStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BuyStorage(ctx, req.(*MsgBuyStorage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimStray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimStray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimStray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/ClaimStray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimStray(ctx, req.(*MsgClaimStray))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpgradeStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpgradeStorage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpgradeStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/UpgradeStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpgradeStorage(ctx, req.(*MsgUpgradeStorage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddProviderClaimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddClaimer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddProviderClaimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/AddProviderClaimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddProviderClaimer(ctx, req.(*MsgAddClaimer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveProviderClaimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveClaimer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveProviderClaimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/RemoveProviderClaimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveProviderClaimer(ctx, req.(*MsgRemoveClaimer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PostZKProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPostZKProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PostZKProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/PostZKProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PostZKProof(ctx, req.(*MsgPostZKProof))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "canine_chain.storage.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostContract",
			Handler:    _Msg_PostContract_Handler,
		},
		{
			MethodName: "Postproof",
			Handler:    _Msg_Postproof_Handler,
		},
		{
			MethodName: "SignContract",
			Handler:    _Msg_SignContract_Handler,
		},
		{
			MethodName: "SetProviderIP",
			Handler:    _Msg_SetProviderIP_Handler,
		},
		{
			MethodName: "SetProviderKeybase",
			Handler:    _Msg_SetProviderKeybase_Handler,
		},
		{
			MethodName: "SetProviderTotalspace",
			Handler:    _Msg_SetProviderTotalspace_Handler,
		},
		{
			MethodName: "InitProvider",
			Handler:    _Msg_InitProvider_Handler,
		},
		{
			MethodName: "CancelContract",
			Handler:    _Msg_CancelContract_Handler,
		},
		{
			MethodName: "BuyStorage",
			Handler:    _Msg_BuyStorage_Handler,
		},
		{
			MethodName: "ClaimStray",
			Handler:    _Msg_ClaimStray_Handler,
		},
		{
			MethodName: "UpgradeStorage",
			Handler:    _Msg_UpgradeStorage_Handler,
		},
		{
			MethodName: "AddProviderClaimer",
			Handler:    _Msg_AddProviderClaimer_Handler,
		},
		{
			MethodName: "RemoveProviderClaimer",
			Handler:    _Msg_RemoveProviderClaimer_Handler,
		},
		{
			MethodName: "PostZKProof",
			Handler:    _Msg_PostZKProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "canine_chain/storage/tx.proto",
}

func (m *MsgPostContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fid) > 0 {
		i -= len(m.Fid)
		copy(dAtA[i:], m.Fid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Fid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Filesize) > 0 {
		i -= len(m.Filesize)
		copy(dAtA[i:], m.Filesize)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Filesize)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signee) > 0 {
		i -= len(m.Signee)
		copy(dAtA[i:], m.Signee)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPostproof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostproof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostproof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hashlist) > 0 {
		i -= len(m.Hashlist)
		copy(dAtA[i:], m.Hashlist)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hashlist)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Item) > 0 {
		i -= len(m.Item)
		copy(dAtA[i:], m.Item)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Item)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostproofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostproofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostproofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostZKProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostZKProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostZKProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Hashlist) > 0 {
		i -= len(m.Hashlist)
		copy(dAtA[i:], m.Hashlist)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hashlist)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Package.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostZKProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostZKProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostZKProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PayOnce {
		i--
		if m.PayOnce {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetProviderIP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetProviderIP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetProviderIP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetProviderIPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetProviderIPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetProviderIPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetProviderKeybase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetProviderKeybase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetProviderKeybase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keybase) > 0 {
		i -= len(m.Keybase)
		copy(dAtA[i:], m.Keybase)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Keybase)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetProviderKeybaseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetProviderKeybaseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetProviderKeybaseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetProviderTotalspace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetProviderTotalspace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetProviderTotalspace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Space) > 0 {
		i -= len(m.Space)
		copy(dAtA[i:], m.Space)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Space)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetProviderTotalspaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetProviderTotalspaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetProviderTotalspaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddClaimer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddClaimer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddClaimer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimAddress) > 0 {
		i -= len(m.ClaimAddress)
		copy(dAtA[i:], m.ClaimAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClaimAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddClaimerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddClaimerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddClaimerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveClaimer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveClaimer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveClaimer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimAddress) > 0 {
		i -= len(m.ClaimAddress)
		copy(dAtA[i:], m.ClaimAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClaimAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveClaimerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveClaimerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveClaimerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgInitProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Totalspace) > 0 {
		i -= len(m.Totalspace)
		copy(dAtA[i:], m.Totalspace)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Totalspace)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Keybase) > 0 {
		i -= len(m.Keybase)
		copy(dAtA[i:], m.Keybase)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Keybase)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBuyStorage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentDenom) > 0 {
		i -= len(m.PaymentDenom)
		copy(dAtA[i:], m.PaymentDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PaymentDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ForAddress) > 0 {
		i -= len(m.ForAddress)
		copy(dAtA[i:], m.ForAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ForAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimStray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimStray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimStray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForAddress) > 0 {
		i -= len(m.ForAddress)
		copy(dAtA[i:], m.ForAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ForAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimStrayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimStrayResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimStrayResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpgradeStorage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpgradeStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpgradeStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentDenom) > 0 {
		i -= len(m.PaymentDenom)
		copy(dAtA[i:], m.PaymentDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PaymentDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ForAddress) > 0 {
		i -= len(m.ForAddress)
		copy(dAtA[i:], m.ForAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ForAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpgradeStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpgradeStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpgradeStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgPostContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signee)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Filesize)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Fid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPostContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPostproof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Item)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hashlist)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPostproofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPostZKProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Package.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hashlist)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPostZKProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSignContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PayOnce {
		n += 2
	}
	return n
}

func (m *MsgSignContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetProviderIP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetProviderIPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetProviderKeybase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Keybase)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetProviderKeybaseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetProviderTotalspace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Space)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetProviderTotalspaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddClaimer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClaimAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddClaimerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveClaimer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClaimAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveClaimerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgInitProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Keybase)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Totalspace)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInitProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBuyStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ForAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PaymentDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBuyStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimStray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ForAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimStrayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpgradeStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ForAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PaymentDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpgradeStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgPostContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filesize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filesize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostproof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostproof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostproof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashlist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashlist = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostproofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostproofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostproofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostZKProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostZKProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostZKProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Package", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Package.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashlist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashlist = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostZKProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostZKProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostZKProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayOnce", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayOnce = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetProviderIP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetProviderIP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetProviderIP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetProviderIPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetProviderIPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetProviderIPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetProviderKeybase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetProviderKeybase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetProviderKeybase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keybase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keybase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetProviderKeybaseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetProviderKeybaseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetProviderKeybaseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetProviderTotalspace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetProviderTotalspace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetProviderTotalspace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Space = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetProviderTotalspaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetProviderTotalspaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetProviderTotalspaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddClaimer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddClaimer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddClaimer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddClaimerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddClaimerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddClaimerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveClaimer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveClaimer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveClaimer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveClaimerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveClaimerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveClaimerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keybase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keybase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Totalspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Totalspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyStorage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyStorage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyStorage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimStray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimStray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimStray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimStrayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimStrayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimStrayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpgradeStorage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpgradeStorage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpgradeStorage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpgradeStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpgradeStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpgradeStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
