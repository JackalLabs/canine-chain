// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canine_chain/storage/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgPostFile struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Merkle        []byte `protobuf:"bytes,2,opt,name=merkle,proto3" json:"merkle,omitempty"`
	FileSize      int64  `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	ProofInterval int64  `protobuf:"varint,4,opt,name=proof_interval,json=proofInterval,proto3" json:"proof_interval,omitempty"`
	ProofType     int64  `protobuf:"varint,5,opt,name=proof_type,json=proofType,proto3" json:"proof_type,omitempty"`
	MaxProofs     int64  `protobuf:"varint,6,opt,name=max_proofs,json=maxProofs,proto3" json:"max_proofs,omitempty"`
	Expires       int64  `protobuf:"varint,7,opt,name=expires,proto3" json:"expires,omitempty"`
	Note          string `protobuf:"bytes,8,opt,name=note,proto3" json:"note,omitempty"`
}

func (m *MsgPostFile) Reset()         { *m = MsgPostFile{} }
func (m *MsgPostFile) String() string { return proto.CompactTextString(m) }
func (*MsgPostFile) ProtoMessage()    {}
func (*MsgPostFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{0}
}
func (m *MsgPostFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostFile.Merge(m, src)
}
func (m *MsgPostFile) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostFile) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostFile.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostFile proto.InternalMessageInfo

func (m *MsgPostFile) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPostFile) GetMerkle() []byte {
	if m != nil {
		return m.Merkle
	}
	return nil
}

func (m *MsgPostFile) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *MsgPostFile) GetProofInterval() int64 {
	if m != nil {
		return m.ProofInterval
	}
	return 0
}

func (m *MsgPostFile) GetProofType() int64 {
	if m != nil {
		return m.ProofType
	}
	return 0
}

func (m *MsgPostFile) GetMaxProofs() int64 {
	if m != nil {
		return m.MaxProofs
	}
	return 0
}

func (m *MsgPostFile) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (m *MsgPostFile) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type MsgPostFileResponse struct {
	ProviderIps []string `protobuf:"bytes,1,rep,name=provider_ips,json=providerIps,proto3" json:"provider_ips,omitempty"`
	StartBlock  int64    `protobuf:"varint,2,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
}

func (m *MsgPostFileResponse) Reset()         { *m = MsgPostFileResponse{} }
func (m *MsgPostFileResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPostFileResponse) ProtoMessage()    {}
func (*MsgPostFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{1}
}
func (m *MsgPostFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostFileResponse.Merge(m, src)
}
func (m *MsgPostFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostFileResponse proto.InternalMessageInfo

func (m *MsgPostFileResponse) GetProviderIps() []string {
	if m != nil {
		return m.ProviderIps
	}
	return nil
}

func (m *MsgPostFileResponse) GetStartBlock() int64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

type MsgPostProof struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Item     []byte `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	HashList []byte `protobuf:"bytes,3,opt,name=hash_list,json=hashList,proto3" json:"hash_list,omitempty"`
	Merkle   []byte `protobuf:"bytes,4,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Owner    string `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	Start    int64  `protobuf:"varint,6,opt,name=start,proto3" json:"start,omitempty"`
	ToProve  int64  `protobuf:"varint,7,opt,name=to_prove,json=toProve,proto3" json:"to_prove,omitempty"`
}

func (m *MsgPostProof) Reset()         { *m = MsgPostProof{} }
func (m *MsgPostProof) String() string { return proto.CompactTextString(m) }
func (*MsgPostProof) ProtoMessage()    {}
func (*MsgPostProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{2}
}
func (m *MsgPostProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostProof.Merge(m, src)
}
func (m *MsgPostProof) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostProof.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostProof proto.InternalMessageInfo

func (m *MsgPostProof) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPostProof) GetItem() []byte {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *MsgPostProof) GetHashList() []byte {
	if m != nil {
		return m.HashList
	}
	return nil
}

func (m *MsgPostProof) GetMerkle() []byte {
	if m != nil {
		return m.Merkle
	}
	return nil
}

func (m *MsgPostProof) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgPostProof) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *MsgPostProof) GetToProve() int64 {
	if m != nil {
		return m.ToProve
	}
	return 0
}

type MsgPostProofResponse struct {
	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *MsgPostProofResponse) Reset()         { *m = MsgPostProofResponse{} }
func (m *MsgPostProofResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPostProofResponse) ProtoMessage()    {}
func (*MsgPostProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{3}
}
func (m *MsgPostProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostProofResponse.Merge(m, src)
}
func (m *MsgPostProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostProofResponse proto.InternalMessageInfo

func (m *MsgPostProofResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *MsgPostProofResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type MsgDeleteFile struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Merkle  []byte `protobuf:"bytes,2,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Start   int64  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
}

func (m *MsgDeleteFile) Reset()         { *m = MsgDeleteFile{} }
func (m *MsgDeleteFile) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteFile) ProtoMessage()    {}
func (*MsgDeleteFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{4}
}
func (m *MsgDeleteFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteFile.Merge(m, src)
}
func (m *MsgDeleteFile) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteFile) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteFile.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteFile proto.InternalMessageInfo

func (m *MsgDeleteFile) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteFile) GetMerkle() []byte {
	if m != nil {
		return m.Merkle
	}
	return nil
}

func (m *MsgDeleteFile) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

type MsgDeleteFileResponse struct {
}

func (m *MsgDeleteFileResponse) Reset()         { *m = MsgDeleteFileResponse{} }
func (m *MsgDeleteFileResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteFileResponse) ProtoMessage()    {}
func (*MsgDeleteFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{5}
}
func (m *MsgDeleteFileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteFileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteFileResponse.Merge(m, src)
}
func (m *MsgDeleteFileResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteFileResponse proto.InternalMessageInfo

type MsgSetProviderIP struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *MsgSetProviderIP) Reset()         { *m = MsgSetProviderIP{} }
func (m *MsgSetProviderIP) String() string { return proto.CompactTextString(m) }
func (*MsgSetProviderIP) ProtoMessage()    {}
func (*MsgSetProviderIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{6}
}
func (m *MsgSetProviderIP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetProviderIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetProviderIP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetProviderIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetProviderIP.Merge(m, src)
}
func (m *MsgSetProviderIP) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetProviderIP) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetProviderIP.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetProviderIP proto.InternalMessageInfo

func (m *MsgSetProviderIP) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetProviderIP) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type MsgSetProviderIPResponse struct {
}

func (m *MsgSetProviderIPResponse) Reset()         { *m = MsgSetProviderIPResponse{} }
func (m *MsgSetProviderIPResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetProviderIPResponse) ProtoMessage()    {}
func (*MsgSetProviderIPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{7}
}
func (m *MsgSetProviderIPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetProviderIPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetProviderIPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetProviderIPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetProviderIPResponse.Merge(m, src)
}
func (m *MsgSetProviderIPResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetProviderIPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetProviderIPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetProviderIPResponse proto.InternalMessageInfo

type MsgSetProviderKeybase struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Keybase string `protobuf:"bytes,2,opt,name=keybase,proto3" json:"keybase,omitempty"`
}

func (m *MsgSetProviderKeybase) Reset()         { *m = MsgSetProviderKeybase{} }
func (m *MsgSetProviderKeybase) String() string { return proto.CompactTextString(m) }
func (*MsgSetProviderKeybase) ProtoMessage()    {}
func (*MsgSetProviderKeybase) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{8}
}
func (m *MsgSetProviderKeybase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetProviderKeybase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetProviderKeybase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetProviderKeybase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetProviderKeybase.Merge(m, src)
}
func (m *MsgSetProviderKeybase) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetProviderKeybase) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetProviderKeybase.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetProviderKeybase proto.InternalMessageInfo

func (m *MsgSetProviderKeybase) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetProviderKeybase) GetKeybase() string {
	if m != nil {
		return m.Keybase
	}
	return ""
}

type MsgSetProviderKeybaseResponse struct {
}

func (m *MsgSetProviderKeybaseResponse) Reset()         { *m = MsgSetProviderKeybaseResponse{} }
func (m *MsgSetProviderKeybaseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetProviderKeybaseResponse) ProtoMessage()    {}
func (*MsgSetProviderKeybaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{9}
}
func (m *MsgSetProviderKeybaseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetProviderKeybaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetProviderKeybaseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetProviderKeybaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetProviderKeybaseResponse.Merge(m, src)
}
func (m *MsgSetProviderKeybaseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetProviderKeybaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetProviderKeybaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetProviderKeybaseResponse proto.InternalMessageInfo

type MsgSetProviderTotalSpace struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Space   int64  `protobuf:"varint,2,opt,name=space,proto3" json:"space,omitempty"`
}

func (m *MsgSetProviderTotalSpace) Reset()         { *m = MsgSetProviderTotalSpace{} }
func (m *MsgSetProviderTotalSpace) String() string { return proto.CompactTextString(m) }
func (*MsgSetProviderTotalSpace) ProtoMessage()    {}
func (*MsgSetProviderTotalSpace) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{10}
}
func (m *MsgSetProviderTotalSpace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetProviderTotalSpace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetProviderTotalSpace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetProviderTotalSpace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetProviderTotalSpace.Merge(m, src)
}
func (m *MsgSetProviderTotalSpace) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetProviderTotalSpace) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetProviderTotalSpace.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetProviderTotalSpace proto.InternalMessageInfo

func (m *MsgSetProviderTotalSpace) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetProviderTotalSpace) GetSpace() int64 {
	if m != nil {
		return m.Space
	}
	return 0
}

type MsgSetProviderTotalSpaceResponse struct {
}

func (m *MsgSetProviderTotalSpaceResponse) Reset()         { *m = MsgSetProviderTotalSpaceResponse{} }
func (m *MsgSetProviderTotalSpaceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetProviderTotalSpaceResponse) ProtoMessage()    {}
func (*MsgSetProviderTotalSpaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{11}
}
func (m *MsgSetProviderTotalSpaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetProviderTotalSpaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetProviderTotalSpaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetProviderTotalSpaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetProviderTotalSpaceResponse.Merge(m, src)
}
func (m *MsgSetProviderTotalSpaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetProviderTotalSpaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetProviderTotalSpaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetProviderTotalSpaceResponse proto.InternalMessageInfo

type MsgAddClaimer struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ClaimAddress string `protobuf:"bytes,2,opt,name=claim_address,json=claimAddress,proto3" json:"claim_address,omitempty"`
}

func (m *MsgAddClaimer) Reset()         { *m = MsgAddClaimer{} }
func (m *MsgAddClaimer) String() string { return proto.CompactTextString(m) }
func (*MsgAddClaimer) ProtoMessage()    {}
func (*MsgAddClaimer) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{12}
}
func (m *MsgAddClaimer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddClaimer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddClaimer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddClaimer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddClaimer.Merge(m, src)
}
func (m *MsgAddClaimer) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddClaimer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddClaimer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddClaimer proto.InternalMessageInfo

func (m *MsgAddClaimer) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddClaimer) GetClaimAddress() string {
	if m != nil {
		return m.ClaimAddress
	}
	return ""
}

type MsgAddClaimerResponse struct {
}

func (m *MsgAddClaimerResponse) Reset()         { *m = MsgAddClaimerResponse{} }
func (m *MsgAddClaimerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddClaimerResponse) ProtoMessage()    {}
func (*MsgAddClaimerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{13}
}
func (m *MsgAddClaimerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddClaimerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddClaimerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddClaimerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddClaimerResponse.Merge(m, src)
}
func (m *MsgAddClaimerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddClaimerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddClaimerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddClaimerResponse proto.InternalMessageInfo

type MsgRemoveClaimer struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ClaimAddress string `protobuf:"bytes,2,opt,name=claim_address,json=claimAddress,proto3" json:"claim_address,omitempty"`
}

func (m *MsgRemoveClaimer) Reset()         { *m = MsgRemoveClaimer{} }
func (m *MsgRemoveClaimer) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveClaimer) ProtoMessage()    {}
func (*MsgRemoveClaimer) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{14}
}
func (m *MsgRemoveClaimer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveClaimer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveClaimer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveClaimer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveClaimer.Merge(m, src)
}
func (m *MsgRemoveClaimer) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveClaimer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveClaimer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveClaimer proto.InternalMessageInfo

func (m *MsgRemoveClaimer) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveClaimer) GetClaimAddress() string {
	if m != nil {
		return m.ClaimAddress
	}
	return ""
}

type MsgRemoveClaimerResponse struct {
}

func (m *MsgRemoveClaimerResponse) Reset()         { *m = MsgRemoveClaimerResponse{} }
func (m *MsgRemoveClaimerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveClaimerResponse) ProtoMessage()    {}
func (*MsgRemoveClaimerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{15}
}
func (m *MsgRemoveClaimerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveClaimerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveClaimerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveClaimerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveClaimerResponse.Merge(m, src)
}
func (m *MsgRemoveClaimerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveClaimerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveClaimerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveClaimerResponse proto.InternalMessageInfo

type MsgInitProvider struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Ip         string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Keybase    string `protobuf:"bytes,3,opt,name=keybase,proto3" json:"keybase,omitempty"`
	TotalSpace int64  `protobuf:"varint,4,opt,name=total_space,json=totalSpace,proto3" json:"total_space,omitempty"`
}

func (m *MsgInitProvider) Reset()         { *m = MsgInitProvider{} }
func (m *MsgInitProvider) String() string { return proto.CompactTextString(m) }
func (*MsgInitProvider) ProtoMessage()    {}
func (*MsgInitProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{16}
}
func (m *MsgInitProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitProvider.Merge(m, src)
}
func (m *MsgInitProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitProvider proto.InternalMessageInfo

func (m *MsgInitProvider) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgInitProvider) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *MsgInitProvider) GetKeybase() string {
	if m != nil {
		return m.Keybase
	}
	return ""
}

func (m *MsgInitProvider) GetTotalSpace() int64 {
	if m != nil {
		return m.TotalSpace
	}
	return 0
}

type MsgInitProviderResponse struct {
}

func (m *MsgInitProviderResponse) Reset()         { *m = MsgInitProviderResponse{} }
func (m *MsgInitProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInitProviderResponse) ProtoMessage()    {}
func (*MsgInitProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{17}
}
func (m *MsgInitProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitProviderResponse.Merge(m, src)
}
func (m *MsgInitProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitProviderResponse proto.InternalMessageInfo

type MsgShutdownProvider struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgShutdownProvider) Reset()         { *m = MsgShutdownProvider{} }
func (m *MsgShutdownProvider) String() string { return proto.CompactTextString(m) }
func (*MsgShutdownProvider) ProtoMessage()    {}
func (*MsgShutdownProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{18}
}
func (m *MsgShutdownProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgShutdownProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgShutdownProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgShutdownProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgShutdownProvider.Merge(m, src)
}
func (m *MsgShutdownProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgShutdownProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgShutdownProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgShutdownProvider proto.InternalMessageInfo

func (m *MsgShutdownProvider) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgShutdownProviderResponse struct {
}

func (m *MsgShutdownProviderResponse) Reset()         { *m = MsgShutdownProviderResponse{} }
func (m *MsgShutdownProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgShutdownProviderResponse) ProtoMessage()    {}
func (*MsgShutdownProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{19}
}
func (m *MsgShutdownProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgShutdownProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgShutdownProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgShutdownProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgShutdownProviderResponse.Merge(m, src)
}
func (m *MsgShutdownProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgShutdownProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgShutdownProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgShutdownProviderResponse proto.InternalMessageInfo

type MsgBuyStorage struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ForAddress   string `protobuf:"bytes,2,opt,name=for_address,json=forAddress,proto3" json:"for_address,omitempty"`
	DurationDays int64  `protobuf:"varint,3,opt,name=duration_days,json=durationDays,proto3" json:"duration_days,omitempty"`
	Bytes        int64  `protobuf:"varint,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
	PaymentDenom string `protobuf:"bytes,5,opt,name=payment_denom,json=paymentDenom,proto3" json:"payment_denom,omitempty"`
}

func (m *MsgBuyStorage) Reset()         { *m = MsgBuyStorage{} }
func (m *MsgBuyStorage) String() string { return proto.CompactTextString(m) }
func (*MsgBuyStorage) ProtoMessage()    {}
func (*MsgBuyStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{20}
}
func (m *MsgBuyStorage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyStorage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyStorage.Merge(m, src)
}
func (m *MsgBuyStorage) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyStorage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyStorage proto.InternalMessageInfo

func (m *MsgBuyStorage) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBuyStorage) GetForAddress() string {
	if m != nil {
		return m.ForAddress
	}
	return ""
}

func (m *MsgBuyStorage) GetDurationDays() int64 {
	if m != nil {
		return m.DurationDays
	}
	return 0
}

func (m *MsgBuyStorage) GetBytes() int64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

func (m *MsgBuyStorage) GetPaymentDenom() string {
	if m != nil {
		return m.PaymentDenom
	}
	return ""
}

type MsgBuyStorageResponse struct {
}

func (m *MsgBuyStorageResponse) Reset()         { *m = MsgBuyStorageResponse{} }
func (m *MsgBuyStorageResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBuyStorageResponse) ProtoMessage()    {}
func (*MsgBuyStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{21}
}
func (m *MsgBuyStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyStorageResponse.Merge(m, src)
}
func (m *MsgBuyStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyStorageResponse proto.InternalMessageInfo

type MsgRequestAttestationForm struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Merkle  []byte `protobuf:"bytes,2,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Owner   string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Start   int64  `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
}

func (m *MsgRequestAttestationForm) Reset()         { *m = MsgRequestAttestationForm{} }
func (m *MsgRequestAttestationForm) String() string { return proto.CompactTextString(m) }
func (*MsgRequestAttestationForm) ProtoMessage()    {}
func (*MsgRequestAttestationForm) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{22}
}
func (m *MsgRequestAttestationForm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestAttestationForm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestAttestationForm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestAttestationForm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestAttestationForm.Merge(m, src)
}
func (m *MsgRequestAttestationForm) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestAttestationForm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestAttestationForm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestAttestationForm proto.InternalMessageInfo

func (m *MsgRequestAttestationForm) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRequestAttestationForm) GetMerkle() []byte {
	if m != nil {
		return m.Merkle
	}
	return nil
}

func (m *MsgRequestAttestationForm) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgRequestAttestationForm) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

type MsgRequestAttestationFormResponse struct {
	Providers []string `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	Success   bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Error     string   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *MsgRequestAttestationFormResponse) Reset()         { *m = MsgRequestAttestationFormResponse{} }
func (m *MsgRequestAttestationFormResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestAttestationFormResponse) ProtoMessage()    {}
func (*MsgRequestAttestationFormResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{23}
}
func (m *MsgRequestAttestationFormResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestAttestationFormResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestAttestationFormResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestAttestationFormResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestAttestationFormResponse.Merge(m, src)
}
func (m *MsgRequestAttestationFormResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestAttestationFormResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestAttestationFormResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestAttestationFormResponse proto.InternalMessageInfo

func (m *MsgRequestAttestationFormResponse) GetProviders() []string {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *MsgRequestAttestationFormResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *MsgRequestAttestationFormResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type MsgAttest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Prover  string `protobuf:"bytes,2,opt,name=prover,proto3" json:"prover,omitempty"`
	Merkle  []byte `protobuf:"bytes,3,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Owner   string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Start   int64  `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`
}

func (m *MsgAttest) Reset()         { *m = MsgAttest{} }
func (m *MsgAttest) String() string { return proto.CompactTextString(m) }
func (*MsgAttest) ProtoMessage()    {}
func (*MsgAttest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{24}
}
func (m *MsgAttest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAttest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAttest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAttest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAttest.Merge(m, src)
}
func (m *MsgAttest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAttest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAttest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAttest proto.InternalMessageInfo

func (m *MsgAttest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAttest) GetProver() string {
	if m != nil {
		return m.Prover
	}
	return ""
}

func (m *MsgAttest) GetMerkle() []byte {
	if m != nil {
		return m.Merkle
	}
	return nil
}

func (m *MsgAttest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgAttest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

type MsgAttestResponse struct {
}

func (m *MsgAttestResponse) Reset()         { *m = MsgAttestResponse{} }
func (m *MsgAttestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAttestResponse) ProtoMessage()    {}
func (*MsgAttestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{25}
}
func (m *MsgAttestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAttestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAttestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAttestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAttestResponse.Merge(m, src)
}
func (m *MsgAttestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAttestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAttestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAttestResponse proto.InternalMessageInfo

type MsgRequestReportForm struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Prover  string `protobuf:"bytes,2,opt,name=prover,proto3" json:"prover,omitempty"`
	Merkle  []byte `protobuf:"bytes,3,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Owner   string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Start   int64  `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`
}

func (m *MsgRequestReportForm) Reset()         { *m = MsgRequestReportForm{} }
func (m *MsgRequestReportForm) String() string { return proto.CompactTextString(m) }
func (*MsgRequestReportForm) ProtoMessage()    {}
func (*MsgRequestReportForm) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{26}
}
func (m *MsgRequestReportForm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestReportForm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestReportForm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestReportForm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestReportForm.Merge(m, src)
}
func (m *MsgRequestReportForm) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestReportForm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestReportForm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestReportForm proto.InternalMessageInfo

func (m *MsgRequestReportForm) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRequestReportForm) GetProver() string {
	if m != nil {
		return m.Prover
	}
	return ""
}

func (m *MsgRequestReportForm) GetMerkle() []byte {
	if m != nil {
		return m.Merkle
	}
	return nil
}

func (m *MsgRequestReportForm) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgRequestReportForm) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

type MsgRequestReportFormResponse struct {
	Providers []string `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	Success   bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Error     string   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *MsgRequestReportFormResponse) Reset()         { *m = MsgRequestReportFormResponse{} }
func (m *MsgRequestReportFormResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestReportFormResponse) ProtoMessage()    {}
func (*MsgRequestReportFormResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{27}
}
func (m *MsgRequestReportFormResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestReportFormResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestReportFormResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestReportFormResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestReportFormResponse.Merge(m, src)
}
func (m *MsgRequestReportFormResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestReportFormResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestReportFormResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestReportFormResponse proto.InternalMessageInfo

func (m *MsgRequestReportFormResponse) GetProviders() []string {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *MsgRequestReportFormResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *MsgRequestReportFormResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type MsgReport struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Prover  string `protobuf:"bytes,2,opt,name=prover,proto3" json:"prover,omitempty"`
	Merkle  []byte `protobuf:"bytes,3,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Owner   string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Start   int64  `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`
}

func (m *MsgReport) Reset()         { *m = MsgReport{} }
func (m *MsgReport) String() string { return proto.CompactTextString(m) }
func (*MsgReport) ProtoMessage()    {}
func (*MsgReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{28}
}
func (m *MsgReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReport.Merge(m, src)
}
func (m *MsgReport) XXX_Size() int {
	return m.Size()
}
func (m *MsgReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReport.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReport proto.InternalMessageInfo

func (m *MsgReport) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgReport) GetProver() string {
	if m != nil {
		return m.Prover
	}
	return ""
}

func (m *MsgReport) GetMerkle() []byte {
	if m != nil {
		return m.Merkle
	}
	return nil
}

func (m *MsgReport) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgReport) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

type MsgReportResponse struct {
}

func (m *MsgReportResponse) Reset()         { *m = MsgReportResponse{} }
func (m *MsgReportResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReportResponse) ProtoMessage()    {}
func (*MsgReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{29}
}
func (m *MsgReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReportResponse.Merge(m, src)
}
func (m *MsgReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReportResponse proto.InternalMessageInfo

type MsgRequestChunk struct {
	Creator string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Merkle  []byte     `protobuf:"bytes,2,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Chunk   int64      `protobuf:"varint,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Bid     types.Coin `protobuf:"bytes,4,opt,name=bid,proto3" json:"bid"`
}

func (m *MsgRequestChunk) Reset()         { *m = MsgRequestChunk{} }
func (m *MsgRequestChunk) String() string { return proto.CompactTextString(m) }
func (*MsgRequestChunk) ProtoMessage()    {}
func (*MsgRequestChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{30}
}
func (m *MsgRequestChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestChunk.Merge(m, src)
}
func (m *MsgRequestChunk) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestChunk.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestChunk proto.InternalMessageInfo

func (m *MsgRequestChunk) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRequestChunk) GetMerkle() []byte {
	if m != nil {
		return m.Merkle
	}
	return nil
}

func (m *MsgRequestChunk) GetChunk() int64 {
	if m != nil {
		return m.Chunk
	}
	return 0
}

func (m *MsgRequestChunk) GetBid() types.Coin {
	if m != nil {
		return m.Bid
	}
	return types.Coin{}
}

type MsgRequestChunkResponse struct {
}

func (m *MsgRequestChunkResponse) Reset()         { *m = MsgRequestChunkResponse{} }
func (m *MsgRequestChunkResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestChunkResponse) ProtoMessage()    {}
func (*MsgRequestChunkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{31}
}
func (m *MsgRequestChunkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestChunkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestChunkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestChunkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestChunkResponse.Merge(m, src)
}
func (m *MsgRequestChunkResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestChunkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestChunkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestChunkResponse proto.InternalMessageInfo

type MsgFulfillRequest struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Requester string `protobuf:"bytes,2,opt,name=requester,proto3" json:"requester,omitempty"`
	Merkle    []byte `protobuf:"bytes,3,opt,name=merkle,proto3" json:"merkle,omitempty"`
	Chunk     int64  `protobuf:"varint,4,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Data      []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	HashList  []byte `protobuf:"bytes,6,opt,name=hash_list,json=hashList,proto3" json:"hash_list,omitempty"`
}

func (m *MsgFulfillRequest) Reset()         { *m = MsgFulfillRequest{} }
func (m *MsgFulfillRequest) String() string { return proto.CompactTextString(m) }
func (*MsgFulfillRequest) ProtoMessage()    {}
func (*MsgFulfillRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{32}
}
func (m *MsgFulfillRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFulfillRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFulfillRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFulfillRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFulfillRequest.Merge(m, src)
}
func (m *MsgFulfillRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgFulfillRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFulfillRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFulfillRequest proto.InternalMessageInfo

func (m *MsgFulfillRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgFulfillRequest) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *MsgFulfillRequest) GetMerkle() []byte {
	if m != nil {
		return m.Merkle
	}
	return nil
}

func (m *MsgFulfillRequest) GetChunk() int64 {
	if m != nil {
		return m.Chunk
	}
	return 0
}

func (m *MsgFulfillRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MsgFulfillRequest) GetHashList() []byte {
	if m != nil {
		return m.HashList
	}
	return nil
}

type MsgFulfillRequestResponse struct {
}

func (m *MsgFulfillRequestResponse) Reset()         { *m = MsgFulfillRequestResponse{} }
func (m *MsgFulfillRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFulfillRequestResponse) ProtoMessage()    {}
func (*MsgFulfillRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2194ba0b2c3d6a97, []int{33}
}
func (m *MsgFulfillRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFulfillRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFulfillRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFulfillRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFulfillRequestResponse.Merge(m, src)
}
func (m *MsgFulfillRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFulfillRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFulfillRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFulfillRequestResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgPostFile)(nil), "canine_chain.storage.MsgPostFile")
	proto.RegisterType((*MsgPostFileResponse)(nil), "canine_chain.storage.MsgPostFileResponse")
	proto.RegisterType((*MsgPostProof)(nil), "canine_chain.storage.MsgPostProof")
	proto.RegisterType((*MsgPostProofResponse)(nil), "canine_chain.storage.MsgPostProofResponse")
	proto.RegisterType((*MsgDeleteFile)(nil), "canine_chain.storage.MsgDeleteFile")
	proto.RegisterType((*MsgDeleteFileResponse)(nil), "canine_chain.storage.MsgDeleteFileResponse")
	proto.RegisterType((*MsgSetProviderIP)(nil), "canine_chain.storage.MsgSetProviderIP")
	proto.RegisterType((*MsgSetProviderIPResponse)(nil), "canine_chain.storage.MsgSetProviderIPResponse")
	proto.RegisterType((*MsgSetProviderKeybase)(nil), "canine_chain.storage.MsgSetProviderKeybase")
	proto.RegisterType((*MsgSetProviderKeybaseResponse)(nil), "canine_chain.storage.MsgSetProviderKeybaseResponse")
	proto.RegisterType((*MsgSetProviderTotalSpace)(nil), "canine_chain.storage.MsgSetProviderTotalSpace")
	proto.RegisterType((*MsgSetProviderTotalSpaceResponse)(nil), "canine_chain.storage.MsgSetProviderTotalSpaceResponse")
	proto.RegisterType((*MsgAddClaimer)(nil), "canine_chain.storage.MsgAddClaimer")
	proto.RegisterType((*MsgAddClaimerResponse)(nil), "canine_chain.storage.MsgAddClaimerResponse")
	proto.RegisterType((*MsgRemoveClaimer)(nil), "canine_chain.storage.MsgRemoveClaimer")
	proto.RegisterType((*MsgRemoveClaimerResponse)(nil), "canine_chain.storage.MsgRemoveClaimerResponse")
	proto.RegisterType((*MsgInitProvider)(nil), "canine_chain.storage.MsgInitProvider")
	proto.RegisterType((*MsgInitProviderResponse)(nil), "canine_chain.storage.MsgInitProviderResponse")
	proto.RegisterType((*MsgShutdownProvider)(nil), "canine_chain.storage.MsgShutdownProvider")
	proto.RegisterType((*MsgShutdownProviderResponse)(nil), "canine_chain.storage.MsgShutdownProviderResponse")
	proto.RegisterType((*MsgBuyStorage)(nil), "canine_chain.storage.MsgBuyStorage")
	proto.RegisterType((*MsgBuyStorageResponse)(nil), "canine_chain.storage.MsgBuyStorageResponse")
	proto.RegisterType((*MsgRequestAttestationForm)(nil), "canine_chain.storage.MsgRequestAttestationForm")
	proto.RegisterType((*MsgRequestAttestationFormResponse)(nil), "canine_chain.storage.MsgRequestAttestationFormResponse")
	proto.RegisterType((*MsgAttest)(nil), "canine_chain.storage.MsgAttest")
	proto.RegisterType((*MsgAttestResponse)(nil), "canine_chain.storage.MsgAttestResponse")
	proto.RegisterType((*MsgRequestReportForm)(nil), "canine_chain.storage.MsgRequestReportForm")
	proto.RegisterType((*MsgRequestReportFormResponse)(nil), "canine_chain.storage.MsgRequestReportFormResponse")
	proto.RegisterType((*MsgReport)(nil), "canine_chain.storage.MsgReport")
	proto.RegisterType((*MsgReportResponse)(nil), "canine_chain.storage.MsgReportResponse")
	proto.RegisterType((*MsgRequestChunk)(nil), "canine_chain.storage.MsgRequestChunk")
	proto.RegisterType((*MsgRequestChunkResponse)(nil), "canine_chain.storage.MsgRequestChunkResponse")
	proto.RegisterType((*MsgFulfillRequest)(nil), "canine_chain.storage.MsgFulfillRequest")
	proto.RegisterType((*MsgFulfillRequestResponse)(nil), "canine_chain.storage.MsgFulfillRequestResponse")
}

func init() { proto.RegisterFile("canine_chain/storage/tx.proto", fileDescriptor_2194ba0b2c3d6a97) }

var fileDescriptor_2194ba0b2c3d6a97 = []byte{
	// 1367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcb, 0x6e, 0xdb, 0x46,
	0x17, 0x36, 0x2d, 0xf9, 0xa2, 0x63, 0xd9, 0x49, 0x18, 0x27, 0xa1, 0x99, 0x58, 0x76, 0x18, 0xe4,
	0xff, 0xdd, 0x04, 0x91, 0x60, 0x07, 0x68, 0x37, 0xdd, 0xd8, 0x09, 0x02, 0xa4, 0x89, 0x0b, 0x97,
	0x4e, 0xd1, 0x1b, 0x50, 0x61, 0x44, 0x8e, 0x65, 0xc6, 0x14, 0x87, 0xe1, 0x8c, 0x14, 0x2b, 0x9b,
	0xa2, 0xed, 0xb6, 0x8b, 0x3e, 0x47, 0x9f, 0xa0, 0x8f, 0x90, 0x65, 0x96, 0x5d, 0x15, 0x45, 0xf2,
	0x00, 0x7d, 0x85, 0x62, 0x2e, 0x1c, 0x91, 0xb2, 0x44, 0x29, 0x46, 0x83, 0xee, 0x78, 0xce, 0x7c,
	0x73, 0xae, 0x33, 0x67, 0x3e, 0x10, 0xd6, 0x3d, 0x14, 0x05, 0x11, 0x6e, 0x7a, 0xc7, 0x28, 0x88,
	0x1a, 0x94, 0x91, 0x04, 0xb5, 0x71, 0x83, 0x9d, 0xd6, 0xe3, 0x84, 0x30, 0x62, 0xae, 0x66, 0x97,
	0xeb, 0x6a, 0xd9, 0xae, 0x79, 0x84, 0x76, 0x08, 0x6d, 0xb4, 0x10, 0xc5, 0x8d, 0xde, 0x76, 0x0b,
	0x33, 0xb4, 0xdd, 0xf0, 0x48, 0x10, 0xc9, 0x5d, 0xf6, 0x6a, 0x9b, 0xb4, 0x89, 0xf8, 0x6c, 0xf0,
	0x2f, 0xa9, 0x75, 0xfe, 0x36, 0x60, 0x69, 0x9f, 0xb6, 0x0f, 0x08, 0x65, 0x8f, 0x82, 0x10, 0x9b,
	0x16, 0x2c, 0x78, 0x09, 0x46, 0x8c, 0x24, 0x96, 0xb1, 0x69, 0x6c, 0x55, 0xdc, 0x54, 0x34, 0xaf,
	0xc2, 0x7c, 0x07, 0x27, 0x27, 0x21, 0xb6, 0x66, 0x37, 0x8d, 0xad, 0xaa, 0xab, 0x24, 0xf3, 0x3a,
	0x54, 0x8e, 0x82, 0x10, 0x37, 0x69, 0xf0, 0x0a, 0x5b, 0xa5, 0x4d, 0x63, 0xab, 0xe4, 0x2e, 0x72,
	0xc5, 0x61, 0xf0, 0x0a, 0x9b, 0xb7, 0x61, 0x25, 0x4e, 0x08, 0x39, 0x6a, 0x06, 0x11, 0xc3, 0x49,
	0x0f, 0x85, 0x56, 0x59, 0x20, 0x96, 0x85, 0xf6, 0xb1, 0x52, 0x9a, 0xeb, 0x00, 0x12, 0xc6, 0xfa,
	0x31, 0xb6, 0xe6, 0x04, 0xa4, 0x22, 0x34, 0xcf, 0xfa, 0x31, 0xe6, 0xcb, 0x1d, 0x74, 0xda, 0x14,
	0x0a, 0x6a, 0xcd, 0xcb, 0xe5, 0x0e, 0x3a, 0x3d, 0x10, 0x0a, 0x1e, 0x33, 0x3e, 0x8d, 0x83, 0x04,
	0x53, 0x6b, 0x41, 0xac, 0xa5, 0xa2, 0x69, 0x42, 0x39, 0x22, 0x0c, 0x5b, 0x8b, 0x22, 0x15, 0xf1,
	0xed, 0x7c, 0x03, 0x97, 0x33, 0x09, 0xbb, 0x98, 0xc6, 0x24, 0xa2, 0xd8, 0xbc, 0x09, 0xd5, 0x38,
	0x21, 0xbd, 0xc0, 0xc7, 0x49, 0x33, 0x88, 0xa9, 0x65, 0x6c, 0x96, 0xb6, 0x2a, 0xee, 0x52, 0xaa,
	0x7b, 0x1c, 0x53, 0x73, 0x03, 0x96, 0x28, 0x43, 0x09, 0x6b, 0xb6, 0x42, 0xe2, 0x9d, 0x88, 0x32,
	0x94, 0x5c, 0x10, 0xaa, 0x3d, 0xae, 0x71, 0x7e, 0x37, 0xa0, 0xaa, 0x6c, 0x8b, 0xd0, 0x0a, 0xaa,
	0x69, 0x42, 0x39, 0x60, 0xb8, 0xa3, 0x6a, 0x29, 0xbe, 0x79, 0x25, 0x8f, 0x11, 0x3d, 0x6e, 0x86,
	0x01, 0x65, 0xa2, 0x92, 0x55, 0x77, 0x91, 0x2b, 0x9e, 0x06, 0x94, 0x65, 0xca, 0x5f, 0xce, 0x95,
	0x7f, 0x15, 0xe6, 0xc8, 0xcb, 0x08, 0x27, 0xa2, 0x6a, 0x15, 0x57, 0x0a, 0x5c, 0x2b, 0xe2, 0x52,
	0xc5, 0x92, 0x82, 0xb9, 0x06, 0x8b, 0x8c, 0xf0, 0x32, 0xf6, 0x70, 0x5a, 0x29, 0x46, 0x0e, 0xb8,
	0xe8, 0x7c, 0x09, 0xab, 0xd9, 0xc8, 0x75, 0x59, 0x2c, 0x58, 0xa0, 0x5d, 0xcf, 0xc3, 0x94, 0x8a,
	0x0c, 0x16, 0xdd, 0x54, 0x34, 0x6f, 0xc1, 0x32, 0x4e, 0x12, 0x92, 0x34, 0x3b, 0x98, 0x52, 0xd4,
	0x96, 0xc7, 0xa2, 0xe2, 0x56, 0x85, 0x72, 0x5f, 0xea, 0x9c, 0xaf, 0x60, 0x79, 0x9f, 0xb6, 0x1f,
	0xe2, 0x10, 0x33, 0x7c, 0xce, 0xf3, 0xa5, 0x53, 0x29, 0x65, 0x52, 0x71, 0xae, 0xc1, 0x95, 0x9c,
	0xe1, 0x34, 0x60, 0xe7, 0x53, 0xb8, 0xb8, 0x4f, 0xdb, 0x87, 0x98, 0xe7, 0x21, 0x3b, 0x77, 0x50,
	0xe0, 0x74, 0x05, 0x66, 0x83, 0x58, 0x45, 0x3e, 0x1b, 0xc4, 0x8e, 0x0d, 0xd6, 0xf0, 0x6e, 0x6d,
	0xf9, 0x89, 0x70, 0x99, 0x59, 0x7b, 0x82, 0xfb, 0xfc, 0xb2, 0x15, 0x98, 0xb7, 0x60, 0xe1, 0x44,
	0x82, 0x94, 0x8f, 0x54, 0x74, 0x36, 0x60, 0x7d, 0xa4, 0x31, 0xed, 0xed, 0xb3, 0xe1, 0x48, 0x9e,
	0x11, 0x86, 0xc2, 0xc3, 0x18, 0x79, 0x45, 0x0e, 0x79, 0xb1, 0x38, 0x44, 0x1d, 0x4e, 0x29, 0x38,
	0x0e, 0x6c, 0x8e, 0xb3, 0xa5, 0xfd, 0x7d, 0x2e, 0x3a, 0xb5, 0xeb, 0xfb, 0x0f, 0x42, 0x14, 0x74,
	0x70, 0x52, 0xe0, 0xe4, 0x16, 0x2c, 0x7b, 0x1c, 0xd4, 0x44, 0xbe, 0x9f, 0xf0, 0x93, 0xa1, 0x3a,
	0x2f, 0x94, 0xbb, 0x52, 0xa7, 0x1a, 0x34, 0xb0, 0xa7, 0x1d, 0x7d, 0x21, 0x1a, 0xe4, 0xe2, 0x0e,
	0xe9, 0xe1, 0x7f, 0xc9, 0x97, 0xec, 0x5a, 0xce, 0xa4, 0x76, 0xd7, 0x83, 0x0b, 0xfb, 0xb4, 0xfd,
	0x38, 0x0a, 0x74, 0xf2, 0xd3, 0x1f, 0x87, 0x6c, 0xff, 0x4a, 0xb9, 0xfe, 0xf1, 0x59, 0xc0, 0x78,
	0x11, 0x9b, 0xb2, 0xdc, 0x72, 0xaa, 0x01, 0xd3, 0x75, 0x75, 0xd6, 0xe0, 0xda, 0x90, 0x5f, 0x1d,
	0x52, 0x43, 0x4c, 0xa0, 0xc3, 0xe3, 0x2e, 0xf3, 0xc9, 0xcb, 0x68, 0x72, 0x58, 0xce, 0x3a, 0x5c,
	0x1f, 0xb1, 0x41, 0xdb, 0xfb, 0xcd, 0x10, 0xbd, 0xdb, 0xeb, 0xf6, 0x0f, 0xe5, 0x5b, 0x50, 0x90,
	0xe1, 0x06, 0x2c, 0x1d, 0x91, 0x64, 0xa8, 0x9a, 0x70, 0x44, 0x12, 0x55, 0x4b, 0x5e, 0x70, 0xbf,
	0x9b, 0x20, 0x16, 0x90, 0xa8, 0xe9, 0xa3, 0x3e, 0x55, 0xd7, 0xae, 0x9a, 0x2a, 0x1f, 0xa2, 0x3e,
	0xe5, 0xc7, 0xac, 0xd5, 0x67, 0x98, 0xaa, 0xbc, 0xa5, 0xc0, 0xb7, 0xc6, 0xa8, 0xdf, 0xc1, 0x11,
	0x6b, 0xfa, 0x38, 0x22, 0x1d, 0x35, 0x92, 0xaa, 0x4a, 0xf9, 0x90, 0xeb, 0xd4, 0xb9, 0x18, 0xc4,
	0xaa, 0xb3, 0xe8, 0xc3, 0x9a, 0x68, 0xe2, 0x8b, 0x2e, 0xa6, 0x6c, 0x97, 0x31, 0x4c, 0x99, 0x70,
	0xf8, 0x88, 0x24, 0x9d, 0xf3, 0x8d, 0x0d, 0x39, 0x17, 0x4b, 0x23, 0xe7, 0x62, 0x39, 0x3b, 0x4c,
	0x5e, 0xc0, 0xcd, 0xb1, 0xae, 0xf5, 0x24, 0xbc, 0x01, 0x95, 0xf4, 0x31, 0x48, 0x5f, 0x87, 0x81,
	0x22, 0x3b, 0x27, 0x67, 0xf3, 0x73, 0x72, 0x15, 0xe6, 0xc4, 0x48, 0x4c, 0x03, 0x11, 0x82, 0xf3,
	0xa3, 0x01, 0x15, 0x7e, 0x3f, 0x84, 0xb3, 0xe2, 0xf4, 0xc4, 0xbc, 0x4e, 0x54, 0xab, 0x94, 0x94,
	0x49, 0xbb, 0x34, 0x3a, 0xed, 0xf2, 0xc8, 0xb4, 0xe7, 0xb2, 0x69, 0x5f, 0x86, 0x4b, 0x3a, 0x04,
	0xdd, 0x86, 0x5f, 0x0c, 0xf1, 0x12, 0xa8, 0x62, 0xb8, 0x38, 0x26, 0x09, 0x9b, 0xdc, 0x82, 0x0f,
	0x16, 0x63, 0x08, 0x37, 0x46, 0x45, 0xf3, 0x61, 0xbb, 0x22, 0xfd, 0xfc, 0xa7, 0x5d, 0x91, 0x21,
	0x64, 0xbb, 0x72, 0x61, 0x50, 0x87, 0x07, 0xc7, 0xdd, 0xe8, 0xe4, 0x7c, 0x77, 0xc2, 0xe3, 0x5b,
	0xd3, 0xa7, 0x54, 0x08, 0xe6, 0x36, 0x94, 0x5a, 0x81, 0x2f, 0x42, 0x5b, 0xda, 0x59, 0xab, 0x4b,
	0x1a, 0x59, 0xe7, 0x53, 0xae, 0xae, 0x68, 0x64, 0xfd, 0x01, 0x09, 0xa2, 0xbd, 0xf2, 0xeb, 0x3f,
	0x37, 0x66, 0x5c, 0x8e, 0x55, 0xc3, 0x2d, 0x1b, 0x4d, 0x76, 0x18, 0xf1, 0xf8, 0x1f, 0x75, 0xc3,
	0xa3, 0x20, 0x0c, 0x15, 0xa4, 0x20, 0xd6, 0x1b, 0x50, 0x49, 0x24, 0x48, 0x57, 0x73, 0xa0, 0x28,
	0x2a, 0xa8, 0xcc, 0xa4, 0x9c, 0xcd, 0xc4, 0x84, 0xb2, 0x8f, 0x18, 0x12, 0xf5, 0xac, 0xba, 0xe2,
	0x3b, 0x4f, 0xaa, 0xe6, 0xf3, 0xa4, 0xca, 0xb9, 0x2e, 0x66, 0x4e, 0x3e, 0xd6, 0x34, 0x93, 0x9d,
	0x9f, 0x57, 0xa0, 0xb4, 0x4f, 0xdb, 0xe6, 0xd7, 0xb0, 0xa8, 0xe9, 0xf1, 0xcd, 0xfa, 0x28, 0xee,
	0x5d, 0xcf, 0x10, 0x4a, 0xfb, 0xa3, 0x89, 0x10, 0x7d, 0x78, 0xbf, 0x83, 0xca, 0x80, 0x2b, 0x3a,
	0x85, 0xfb, 0x04, 0xc6, 0xbe, 0x33, 0x19, 0xa3, 0x8d, 0x7f, 0x0f, 0x90, 0xe1, 0x5d, 0xb7, 0xc6,
	0xee, 0x1c, 0x80, 0xec, 0xbb, 0x53, 0x80, 0xb4, 0xfd, 0x36, 0x2c, 0xe7, 0x59, 0xd6, 0xff, 0xc6,
	0xee, 0xce, 0xe1, 0xec, 0xfa, 0x74, 0x38, 0xed, 0xa8, 0x07, 0xe6, 0x08, 0xd2, 0x75, 0x77, 0x1a,
	0x2b, 0x0a, 0x6c, 0xdf, 0x7f, 0x0f, 0xb0, 0xf6, 0xfb, 0x03, 0x5c, 0x19, 0x4d, 0xbf, 0xa6, 0x4a,
	0x60, 0x80, 0xb7, 0x3f, 0x7e, 0x3f, 0xbc, 0x0e, 0xc0, 0x87, 0x6a, 0x8e, 0xb7, 0xdc, 0x1e, 0x6b,
	0x27, 0x0b, 0xb3, 0xef, 0x4d, 0x05, 0xd3, 0x5e, 0x62, 0xb8, 0x78, 0x86, 0x8a, 0x8c, 0x3f, 0xc3,
	0xc3, 0x50, 0x7b, 0x7b, 0x6a, 0x68, 0xf6, 0x64, 0x66, 0xb8, 0xca, 0xf8, 0x93, 0x39, 0x00, 0x15,
	0x9c, 0xcc, 0xb3, 0x4c, 0xc2, 0x3c, 0x02, 0x73, 0xd7, 0xf7, 0x53, 0xb7, 0x29, 0xc7, 0x1c, 0xef,
	0x67, 0x40, 0x52, 0x0b, 0xfc, 0x9c, 0x65, 0xb2, 0x26, 0x81, 0x2b, 0x92, 0x73, 0x0e, 0xbb, 0x1a,
	0x7f, 0x13, 0x72, 0x1c, 0xb5, 0xe0, 0x26, 0x8c, 0xe4, 0xb2, 0xe6, 0x4f, 0x06, 0x5c, 0x1d, 0x43,
	0x90, 0x1a, 0x05, 0xa6, 0x46, 0x6d, 0xb0, 0x3f, 0x79, 0xcf, 0x0d, 0x3a, 0x08, 0x17, 0xe6, 0x15,
	0x6b, 0xd9, 0x18, 0x5f, 0x2c, 0x01, 0xb0, 0xff, 0x3f, 0x01, 0xa0, 0x6d, 0x52, 0xb8, 0x74, 0x96,
	0x70, 0xdc, 0x99, 0x14, 0xe1, 0x00, 0x6b, 0xef, 0x4c, 0x8f, 0xcd, 0x26, 0xa2, 0x1e, 0xfa, 0x8d,
	0x82, 0xdd, 0x1c, 0x50, 0x90, 0x48, 0xfe, 0x9d, 0xe6, 0x57, 0x36, 0xf7, 0x46, 0xdf, 0x9e, 0x14,
	0x97, 0x80, 0x15, 0x5c, 0xd9, 0x51, 0x6f, 0xac, 0xf9, 0x1c, 0x56, 0x86, 0xde, 0xd7, 0xf1, 0x01,
	0xe6, 0x81, 0x76, 0x63, 0x4a, 0x60, 0xea, 0x6b, 0xef, 0xe9, 0xeb, 0xb7, 0x35, 0xe3, 0xcd, 0xdb,
	0x9a, 0xf1, 0xd7, 0xdb, 0x9a, 0xf1, 0xeb, 0xbb, 0xda, 0xcc, 0x9b, 0x77, 0xb5, 0x99, 0x3f, 0xde,
	0xd5, 0x66, 0xbe, 0xdd, 0x69, 0x07, 0xec, 0xb8, 0xdb, 0xaa, 0x7b, 0xa4, 0xd3, 0x78, 0x8e, 0xbc,
	0x13, 0x14, 0x3e, 0x45, 0x2d, 0xda, 0x90, 0xf6, 0xef, 0xc9, 0x7f, 0x57, 0xa7, 0x83, 0xbf, 0x57,
	0xfd, 0x18, 0xd3, 0xd6, 0xbc, 0xf8, 0xeb, 0x74, 0xff, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7b,
	0x48, 0xff, 0xa3, 0xe2, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	PostFile(ctx context.Context, in *MsgPostFile, opts ...grpc.CallOption) (*MsgPostFileResponse, error)
	PostProof(ctx context.Context, in *MsgPostProof, opts ...grpc.CallOption) (*MsgPostProofResponse, error)
	DeleteFile(ctx context.Context, in *MsgDeleteFile, opts ...grpc.CallOption) (*MsgDeleteFileResponse, error)
	SetProviderIP(ctx context.Context, in *MsgSetProviderIP, opts ...grpc.CallOption) (*MsgSetProviderIPResponse, error)
	SetProviderKeybase(ctx context.Context, in *MsgSetProviderKeybase, opts ...grpc.CallOption) (*MsgSetProviderKeybaseResponse, error)
	SetProviderTotalSpace(ctx context.Context, in *MsgSetProviderTotalSpace, opts ...grpc.CallOption) (*MsgSetProviderTotalSpaceResponse, error)
	InitProvider(ctx context.Context, in *MsgInitProvider, opts ...grpc.CallOption) (*MsgInitProviderResponse, error)
	ShutdownProvider(ctx context.Context, in *MsgShutdownProvider, opts ...grpc.CallOption) (*MsgShutdownProviderResponse, error)
	BuyStorage(ctx context.Context, in *MsgBuyStorage, opts ...grpc.CallOption) (*MsgBuyStorageResponse, error)
	AddProviderClaimer(ctx context.Context, in *MsgAddClaimer, opts ...grpc.CallOption) (*MsgAddClaimerResponse, error)
	RemoveProviderClaimer(ctx context.Context, in *MsgRemoveClaimer, opts ...grpc.CallOption) (*MsgRemoveClaimerResponse, error)
	RequestAttestationForm(ctx context.Context, in *MsgRequestAttestationForm, opts ...grpc.CallOption) (*MsgRequestAttestationFormResponse, error)
	Attest(ctx context.Context, in *MsgAttest, opts ...grpc.CallOption) (*MsgAttestResponse, error)
	RequestReportForm(ctx context.Context, in *MsgRequestReportForm, opts ...grpc.CallOption) (*MsgRequestReportFormResponse, error)
	Report(ctx context.Context, in *MsgReport, opts ...grpc.CallOption) (*MsgReportResponse, error)
	// oracle stuff
	RequestChunk(ctx context.Context, in *MsgRequestChunk, opts ...grpc.CallOption) (*MsgRequestChunkResponse, error)
	FulfillRequest(ctx context.Context, in *MsgFulfillRequest, opts ...grpc.CallOption) (*MsgFulfillRequestResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) PostFile(ctx context.Context, in *MsgPostFile, opts ...grpc.CallOption) (*MsgPostFileResponse, error) {
	out := new(MsgPostFileResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/PostFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PostProof(ctx context.Context, in *MsgPostProof, opts ...grpc.CallOption) (*MsgPostProofResponse, error) {
	out := new(MsgPostProofResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/PostProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteFile(ctx context.Context, in *MsgDeleteFile, opts ...grpc.CallOption) (*MsgDeleteFileResponse, error) {
	out := new(MsgDeleteFileResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetProviderIP(ctx context.Context, in *MsgSetProviderIP, opts ...grpc.CallOption) (*MsgSetProviderIPResponse, error) {
	out := new(MsgSetProviderIPResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/SetProviderIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetProviderKeybase(ctx context.Context, in *MsgSetProviderKeybase, opts ...grpc.CallOption) (*MsgSetProviderKeybaseResponse, error) {
	out := new(MsgSetProviderKeybaseResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/SetProviderKeybase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetProviderTotalSpace(ctx context.Context, in *MsgSetProviderTotalSpace, opts ...grpc.CallOption) (*MsgSetProviderTotalSpaceResponse, error) {
	out := new(MsgSetProviderTotalSpaceResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/SetProviderTotalSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitProvider(ctx context.Context, in *MsgInitProvider, opts ...grpc.CallOption) (*MsgInitProviderResponse, error) {
	out := new(MsgInitProviderResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/InitProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ShutdownProvider(ctx context.Context, in *MsgShutdownProvider, opts ...grpc.CallOption) (*MsgShutdownProviderResponse, error) {
	out := new(MsgShutdownProviderResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/ShutdownProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BuyStorage(ctx context.Context, in *MsgBuyStorage, opts ...grpc.CallOption) (*MsgBuyStorageResponse, error) {
	out := new(MsgBuyStorageResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/BuyStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddProviderClaimer(ctx context.Context, in *MsgAddClaimer, opts ...grpc.CallOption) (*MsgAddClaimerResponse, error) {
	out := new(MsgAddClaimerResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/AddProviderClaimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveProviderClaimer(ctx context.Context, in *MsgRemoveClaimer, opts ...grpc.CallOption) (*MsgRemoveClaimerResponse, error) {
	out := new(MsgRemoveClaimerResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/RemoveProviderClaimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestAttestationForm(ctx context.Context, in *MsgRequestAttestationForm, opts ...grpc.CallOption) (*MsgRequestAttestationFormResponse, error) {
	out := new(MsgRequestAttestationFormResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/RequestAttestationForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Attest(ctx context.Context, in *MsgAttest, opts ...grpc.CallOption) (*MsgAttestResponse, error) {
	out := new(MsgAttestResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/Attest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestReportForm(ctx context.Context, in *MsgRequestReportForm, opts ...grpc.CallOption) (*MsgRequestReportFormResponse, error) {
	out := new(MsgRequestReportFormResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/RequestReportForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Report(ctx context.Context, in *MsgReport, opts ...grpc.CallOption) (*MsgReportResponse, error) {
	out := new(MsgReportResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestChunk(ctx context.Context, in *MsgRequestChunk, opts ...grpc.CallOption) (*MsgRequestChunkResponse, error) {
	out := new(MsgRequestChunkResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/RequestChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FulfillRequest(ctx context.Context, in *MsgFulfillRequest, opts ...grpc.CallOption) (*MsgFulfillRequestResponse, error) {
	out := new(MsgFulfillRequestResponse)
	err := c.cc.Invoke(ctx, "/canine_chain.storage.Msg/FulfillRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	PostFile(context.Context, *MsgPostFile) (*MsgPostFileResponse, error)
	PostProof(context.Context, *MsgPostProof) (*MsgPostProofResponse, error)
	DeleteFile(context.Context, *MsgDeleteFile) (*MsgDeleteFileResponse, error)
	SetProviderIP(context.Context, *MsgSetProviderIP) (*MsgSetProviderIPResponse, error)
	SetProviderKeybase(context.Context, *MsgSetProviderKeybase) (*MsgSetProviderKeybaseResponse, error)
	SetProviderTotalSpace(context.Context, *MsgSetProviderTotalSpace) (*MsgSetProviderTotalSpaceResponse, error)
	InitProvider(context.Context, *MsgInitProvider) (*MsgInitProviderResponse, error)
	ShutdownProvider(context.Context, *MsgShutdownProvider) (*MsgShutdownProviderResponse, error)
	BuyStorage(context.Context, *MsgBuyStorage) (*MsgBuyStorageResponse, error)
	AddProviderClaimer(context.Context, *MsgAddClaimer) (*MsgAddClaimerResponse, error)
	RemoveProviderClaimer(context.Context, *MsgRemoveClaimer) (*MsgRemoveClaimerResponse, error)
	RequestAttestationForm(context.Context, *MsgRequestAttestationForm) (*MsgRequestAttestationFormResponse, error)
	Attest(context.Context, *MsgAttest) (*MsgAttestResponse, error)
	RequestReportForm(context.Context, *MsgRequestReportForm) (*MsgRequestReportFormResponse, error)
	Report(context.Context, *MsgReport) (*MsgReportResponse, error)
	// oracle stuff
	RequestChunk(context.Context, *MsgRequestChunk) (*MsgRequestChunkResponse, error)
	FulfillRequest(context.Context, *MsgFulfillRequest) (*MsgFulfillRequestResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) PostFile(ctx context.Context, req *MsgPostFile) (*MsgPostFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostFile not implemented")
}
func (*UnimplementedMsgServer) PostProof(ctx context.Context, req *MsgPostProof) (*MsgPostProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostProof not implemented")
}
func (*UnimplementedMsgServer) DeleteFile(ctx context.Context, req *MsgDeleteFile) (*MsgDeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (*UnimplementedMsgServer) SetProviderIP(ctx context.Context, req *MsgSetProviderIP) (*MsgSetProviderIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProviderIP not implemented")
}
func (*UnimplementedMsgServer) SetProviderKeybase(ctx context.Context, req *MsgSetProviderKeybase) (*MsgSetProviderKeybaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProviderKeybase not implemented")
}
func (*UnimplementedMsgServer) SetProviderTotalSpace(ctx context.Context, req *MsgSetProviderTotalSpace) (*MsgSetProviderTotalSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProviderTotalSpace not implemented")
}
func (*UnimplementedMsgServer) InitProvider(ctx context.Context, req *MsgInitProvider) (*MsgInitProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitProvider not implemented")
}
func (*UnimplementedMsgServer) ShutdownProvider(ctx context.Context, req *MsgShutdownProvider) (*MsgShutdownProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownProvider not implemented")
}
func (*UnimplementedMsgServer) BuyStorage(ctx context.Context, req *MsgBuyStorage) (*MsgBuyStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyStorage not implemented")
}
func (*UnimplementedMsgServer) AddProviderClaimer(ctx context.Context, req *MsgAddClaimer) (*MsgAddClaimerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProviderClaimer not implemented")
}
func (*UnimplementedMsgServer) RemoveProviderClaimer(ctx context.Context, req *MsgRemoveClaimer) (*MsgRemoveClaimerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProviderClaimer not implemented")
}
func (*UnimplementedMsgServer) RequestAttestationForm(ctx context.Context, req *MsgRequestAttestationForm) (*MsgRequestAttestationFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAttestationForm not implemented")
}
func (*UnimplementedMsgServer) Attest(ctx context.Context, req *MsgAttest) (*MsgAttestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attest not implemented")
}
func (*UnimplementedMsgServer) RequestReportForm(ctx context.Context, req *MsgRequestReportForm) (*MsgRequestReportFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestReportForm not implemented")
}
func (*UnimplementedMsgServer) Report(ctx context.Context, req *MsgReport) (*MsgReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (*UnimplementedMsgServer) RequestChunk(ctx context.Context, req *MsgRequestChunk) (*MsgRequestChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestChunk not implemented")
}
func (*UnimplementedMsgServer) FulfillRequest(ctx context.Context, req *MsgFulfillRequest) (*MsgFulfillRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FulfillRequest not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_PostFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPostFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PostFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/PostFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PostFile(ctx, req.(*MsgPostFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PostProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPostProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PostProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/PostProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PostProof(ctx, req.(*MsgPostProof))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteFile(ctx, req.(*MsgDeleteFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetProviderIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetProviderIP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetProviderIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/SetProviderIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetProviderIP(ctx, req.(*MsgSetProviderIP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetProviderKeybase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetProviderKeybase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetProviderKeybase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/SetProviderKeybase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetProviderKeybase(ctx, req.(*MsgSetProviderKeybase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetProviderTotalSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetProviderTotalSpace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetProviderTotalSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/SetProviderTotalSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetProviderTotalSpace(ctx, req.(*MsgSetProviderTotalSpace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/InitProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitProvider(ctx, req.(*MsgInitProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ShutdownProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgShutdownProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ShutdownProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/ShutdownProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ShutdownProvider(ctx, req.(*MsgShutdownProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BuyStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBuyStorage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BuyStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/BuyStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BuyStorage(ctx, req.(*MsgBuyStorage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddProviderClaimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddClaimer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddProviderClaimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/AddProviderClaimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddProviderClaimer(ctx, req.(*MsgAddClaimer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveProviderClaimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveClaimer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveProviderClaimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/RemoveProviderClaimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveProviderClaimer(ctx, req.(*MsgRemoveClaimer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestAttestationForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestAttestationForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestAttestationForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/RequestAttestationForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestAttestationForm(ctx, req.(*MsgRequestAttestationForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Attest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAttest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Attest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/Attest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Attest(ctx, req.(*MsgAttest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestReportForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestReportForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestReportForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/RequestReportForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestReportForm(ctx, req.(*MsgRequestReportForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Report(ctx, req.(*MsgReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestChunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/RequestChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestChunk(ctx, req.(*MsgRequestChunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FulfillRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFulfillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FulfillRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canine_chain.storage.Msg/FulfillRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FulfillRequest(ctx, req.(*MsgFulfillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "canine_chain.storage.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostFile",
			Handler:    _Msg_PostFile_Handler,
		},
		{
			MethodName: "PostProof",
			Handler:    _Msg_PostProof_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Msg_DeleteFile_Handler,
		},
		{
			MethodName: "SetProviderIP",
			Handler:    _Msg_SetProviderIP_Handler,
		},
		{
			MethodName: "SetProviderKeybase",
			Handler:    _Msg_SetProviderKeybase_Handler,
		},
		{
			MethodName: "SetProviderTotalSpace",
			Handler:    _Msg_SetProviderTotalSpace_Handler,
		},
		{
			MethodName: "InitProvider",
			Handler:    _Msg_InitProvider_Handler,
		},
		{
			MethodName: "ShutdownProvider",
			Handler:    _Msg_ShutdownProvider_Handler,
		},
		{
			MethodName: "BuyStorage",
			Handler:    _Msg_BuyStorage_Handler,
		},
		{
			MethodName: "AddProviderClaimer",
			Handler:    _Msg_AddProviderClaimer_Handler,
		},
		{
			MethodName: "RemoveProviderClaimer",
			Handler:    _Msg_RemoveProviderClaimer_Handler,
		},
		{
			MethodName: "RequestAttestationForm",
			Handler:    _Msg_RequestAttestationForm_Handler,
		},
		{
			MethodName: "Attest",
			Handler:    _Msg_Attest_Handler,
		},
		{
			MethodName: "RequestReportForm",
			Handler:    _Msg_RequestReportForm_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Msg_Report_Handler,
		},
		{
			MethodName: "RequestChunk",
			Handler:    _Msg_RequestChunk_Handler,
		},
		{
			MethodName: "FulfillRequest",
			Handler:    _Msg_FulfillRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "canine_chain/storage/tx.proto",
}

func (m *MsgPostFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x42
	}
	if m.Expires != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Expires))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxProofs != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxProofs))
		i--
		dAtA[i] = 0x30
	}
	if m.ProofType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ProofType))
		i--
		dAtA[i] = 0x28
	}
	if m.ProofInterval != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ProofInterval))
		i--
		dAtA[i] = 0x20
	}
	if m.FileSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProviderIps) > 0 {
		for iNdEx := len(m.ProviderIps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProviderIps[iNdEx])
			copy(dAtA[i:], m.ProviderIps[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ProviderIps[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ToProve != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ToProve))
		i--
		dAtA[i] = 0x38
	}
	if m.Start != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.HashList) > 0 {
		i -= len(m.HashList)
		copy(dAtA[i:], m.HashList)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HashList)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Item) > 0 {
		i -= len(m.Item)
		copy(dAtA[i:], m.Item)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Item)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteFileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteFileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteFileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetProviderIP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetProviderIP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetProviderIP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetProviderIPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetProviderIPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetProviderIPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetProviderKeybase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetProviderKeybase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetProviderKeybase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keybase) > 0 {
		i -= len(m.Keybase)
		copy(dAtA[i:], m.Keybase)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Keybase)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetProviderKeybaseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetProviderKeybaseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetProviderKeybaseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetProviderTotalSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetProviderTotalSpace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetProviderTotalSpace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Space != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Space))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetProviderTotalSpaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetProviderTotalSpaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetProviderTotalSpaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddClaimer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddClaimer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddClaimer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimAddress) > 0 {
		i -= len(m.ClaimAddress)
		copy(dAtA[i:], m.ClaimAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClaimAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddClaimerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddClaimerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddClaimerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveClaimer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveClaimer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveClaimer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimAddress) > 0 {
		i -= len(m.ClaimAddress)
		copy(dAtA[i:], m.ClaimAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClaimAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveClaimerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveClaimerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveClaimerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgInitProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalSpace != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TotalSpace))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Keybase) > 0 {
		i -= len(m.Keybase)
		copy(dAtA[i:], m.Keybase)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Keybase)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgShutdownProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgShutdownProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgShutdownProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgShutdownProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgShutdownProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgShutdownProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBuyStorage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentDenom) > 0 {
		i -= len(m.PaymentDenom)
		copy(dAtA[i:], m.PaymentDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PaymentDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Bytes != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Bytes))
		i--
		dAtA[i] = 0x20
	}
	if m.DurationDays != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DurationDays))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ForAddress) > 0 {
		i -= len(m.ForAddress)
		copy(dAtA[i:], m.ForAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ForAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestAttestationForm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestAttestationForm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestAttestationForm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestAttestationFormResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestAttestationFormResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestAttestationFormResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Providers[iNdEx])
			copy(dAtA[i:], m.Providers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Providers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgAttest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAttest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAttest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prover) > 0 {
		i -= len(m.Prover)
		copy(dAtA[i:], m.Prover)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Prover)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAttestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAttestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAttestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestReportForm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestReportForm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestReportForm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prover) > 0 {
		i -= len(m.Prover)
		copy(dAtA[i:], m.Prover)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Prover)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestReportFormResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestReportFormResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestReportFormResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Providers[iNdEx])
			copy(dAtA[i:], m.Providers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Providers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prover) > 0 {
		i -= len(m.Prover)
		copy(dAtA[i:], m.Prover)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Prover)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Chunk != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Chunk))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestChunkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestChunkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestChunkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFulfillRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFulfillRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFulfillRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HashList) > 0 {
		i -= len(m.HashList)
		copy(dAtA[i:], m.HashList)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HashList)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Chunk != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Chunk))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFulfillRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFulfillRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFulfillRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgPostFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovTx(uint64(m.FileSize))
	}
	if m.ProofInterval != 0 {
		n += 1 + sovTx(uint64(m.ProofInterval))
	}
	if m.ProofType != 0 {
		n += 1 + sovTx(uint64(m.ProofType))
	}
	if m.MaxProofs != 0 {
		n += 1 + sovTx(uint64(m.MaxProofs))
	}
	if m.Expires != 0 {
		n += 1 + sovTx(uint64(m.Expires))
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPostFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProviderIps) > 0 {
		for _, s := range m.ProviderIps {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.StartBlock != 0 {
		n += 1 + sovTx(uint64(m.StartBlock))
	}
	return n
}

func (m *MsgPostProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Item)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HashList)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovTx(uint64(m.Start))
	}
	if m.ToProve != 0 {
		n += 1 + sovTx(uint64(m.ToProve))
	}
	return n
}

func (m *MsgPostProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovTx(uint64(m.Start))
	}
	return n
}

func (m *MsgDeleteFileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetProviderIP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetProviderIPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetProviderKeybase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Keybase)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetProviderKeybaseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetProviderTotalSpace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Space != 0 {
		n += 1 + sovTx(uint64(m.Space))
	}
	return n
}

func (m *MsgSetProviderTotalSpaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddClaimer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClaimAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddClaimerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveClaimer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClaimAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveClaimerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgInitProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Keybase)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TotalSpace != 0 {
		n += 1 + sovTx(uint64(m.TotalSpace))
	}
	return n
}

func (m *MsgInitProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgShutdownProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgShutdownProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBuyStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ForAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DurationDays != 0 {
		n += 1 + sovTx(uint64(m.DurationDays))
	}
	if m.Bytes != 0 {
		n += 1 + sovTx(uint64(m.Bytes))
	}
	l = len(m.PaymentDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBuyStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestAttestationForm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovTx(uint64(m.Start))
	}
	return n
}

func (m *MsgRequestAttestationFormResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for _, s := range m.Providers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAttest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Prover)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovTx(uint64(m.Start))
	}
	return n
}

func (m *MsgAttestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestReportForm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Prover)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovTx(uint64(m.Start))
	}
	return n
}

func (m *MsgRequestReportFormResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for _, s := range m.Providers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Prover)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovTx(uint64(m.Start))
	}
	return n
}

func (m *MsgReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Chunk != 0 {
		n += 1 + sovTx(uint64(m.Chunk))
	}
	l = m.Bid.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRequestChunkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFulfillRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Chunk != 0 {
		n += 1 + sovTx(uint64(m.Chunk))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HashList)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFulfillRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgPostFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = append(m.Merkle[:0], dAtA[iNdEx:postIndex]...)
			if m.Merkle == nil {
				m.Merkle = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofInterval", wireType)
			}
			m.ProofInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			m.ProofType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxProofs", wireType)
			}
			m.MaxProofs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxProofs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderIps = append(m.ProviderIps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item[:0], dAtA[iNdEx:postIndex]...)
			if m.Item == nil {
				m.Item = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashList = append(m.HashList[:0], dAtA[iNdEx:postIndex]...)
			if m.HashList == nil {
				m.HashList = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = append(m.Merkle[:0], dAtA[iNdEx:postIndex]...)
			if m.Merkle == nil {
				m.Merkle = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToProve", wireType)
			}
			m.ToProve = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToProve |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = append(m.Merkle[:0], dAtA[iNdEx:postIndex]...)
			if m.Merkle == nil {
				m.Merkle = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteFileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetProviderIP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetProviderIP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetProviderIP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetProviderIPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetProviderIPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetProviderIPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetProviderKeybase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetProviderKeybase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetProviderKeybase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keybase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keybase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetProviderKeybaseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetProviderKeybaseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetProviderKeybaseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetProviderTotalSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetProviderTotalSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetProviderTotalSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			m.Space = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Space |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetProviderTotalSpaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetProviderTotalSpaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetProviderTotalSpaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddClaimer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddClaimer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddClaimer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddClaimerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddClaimerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddClaimerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveClaimer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveClaimer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveClaimer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveClaimerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveClaimerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveClaimerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keybase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keybase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSpace", wireType)
			}
			m.TotalSpace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSpace |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgShutdownProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgShutdownProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgShutdownProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgShutdownProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgShutdownProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgShutdownProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyStorage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyStorage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyStorage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationDays", wireType)
			}
			m.DurationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationDays |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestAttestationForm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestAttestationForm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestAttestationForm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = append(m.Merkle[:0], dAtA[iNdEx:postIndex]...)
			if m.Merkle == nil {
				m.Merkle = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestAttestationFormResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestAttestationFormResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestAttestationFormResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAttest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAttest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAttest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = append(m.Merkle[:0], dAtA[iNdEx:postIndex]...)
			if m.Merkle == nil {
				m.Merkle = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAttestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAttestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAttestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestReportForm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestReportForm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestReportForm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = append(m.Merkle[:0], dAtA[iNdEx:postIndex]...)
			if m.Merkle == nil {
				m.Merkle = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestReportFormResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestReportFormResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestReportFormResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = append(m.Merkle[:0], dAtA[iNdEx:postIndex]...)
			if m.Merkle == nil {
				m.Merkle = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = append(m.Merkle[:0], dAtA[iNdEx:postIndex]...)
			if m.Merkle == nil {
				m.Merkle = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			m.Chunk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chunk |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestChunkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestChunkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestChunkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFulfillRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFulfillRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFulfillRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = append(m.Merkle[:0], dAtA[iNdEx:postIndex]...)
			if m.Merkle == nil {
				m.Merkle = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			m.Chunk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chunk |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashList = append(m.HashList[:0], dAtA[iNdEx:postIndex]...)
			if m.HashList == nil {
				m.HashList = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFulfillRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFulfillRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFulfillRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
