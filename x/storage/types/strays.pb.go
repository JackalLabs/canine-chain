// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canine_chain/storage/strays.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Strays struct {
	Cid      string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Fid      string `protobuf:"bytes,2,opt,name=fid,proto3" json:"fid,omitempty"`
	Signee   string `protobuf:"bytes,3,opt,name=signee,proto3" json:"signee,omitempty"`
	Filesize string `protobuf:"bytes,4,opt,name=filesize,proto3" json:"filesize,omitempty"`
	Merkle   string `protobuf:"bytes,5,opt,name=merkle,proto3" json:"merkle,omitempty"`
	End      int64  `protobuf:"varint,6,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *Strays) Reset()         { *m = Strays{} }
func (m *Strays) String() string { return proto.CompactTextString(m) }
func (*Strays) ProtoMessage()    {}
func (*Strays) Descriptor() ([]byte, []int) {
	return fileDescriptor_2da44830ae5f0b34, []int{0}
}
func (m *Strays) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Strays) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Strays.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Strays) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Strays.Merge(m, src)
}
func (m *Strays) XXX_Size() int {
	return m.Size()
}
func (m *Strays) XXX_DiscardUnknown() {
	xxx_messageInfo_Strays.DiscardUnknown(m)
}

var xxx_messageInfo_Strays proto.InternalMessageInfo

func (m *Strays) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *Strays) GetFid() string {
	if m != nil {
		return m.Fid
	}
	return ""
}

func (m *Strays) GetSignee() string {
	if m != nil {
		return m.Signee
	}
	return ""
}

func (m *Strays) GetFilesize() string {
	if m != nil {
		return m.Filesize
	}
	return ""
}

func (m *Strays) GetMerkle() string {
	if m != nil {
		return m.Merkle
	}
	return ""
}

func (m *Strays) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type StrayV2 struct {
	Cid      string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Fid      string `protobuf:"bytes,2,opt,name=fid,proto3" json:"fid,omitempty"`
	Signer   string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
	FileSize int64  `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Merkle   string `protobuf:"bytes,5,opt,name=merkle,proto3" json:"merkle,omitempty"`
	End      int64  `protobuf:"varint,6,opt,name=end,proto3" json:"end,omitempty"`
	DealType int64  `protobuf:"varint,7,opt,name=deal_type,json=dealType,proto3" json:"deal_type,omitempty"`
}

func (m *StrayV2) Reset()         { *m = StrayV2{} }
func (m *StrayV2) String() string { return proto.CompactTextString(m) }
func (*StrayV2) ProtoMessage()    {}
func (*StrayV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_2da44830ae5f0b34, []int{1}
}
func (m *StrayV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StrayV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StrayV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StrayV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrayV2.Merge(m, src)
}
func (m *StrayV2) XXX_Size() int {
	return m.Size()
}
func (m *StrayV2) XXX_DiscardUnknown() {
	xxx_messageInfo_StrayV2.DiscardUnknown(m)
}

var xxx_messageInfo_StrayV2 proto.InternalMessageInfo

func (m *StrayV2) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *StrayV2) GetFid() string {
	if m != nil {
		return m.Fid
	}
	return ""
}

func (m *StrayV2) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *StrayV2) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *StrayV2) GetMerkle() string {
	if m != nil {
		return m.Merkle
	}
	return ""
}

func (m *StrayV2) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *StrayV2) GetDealType() int64 {
	if m != nil {
		return m.DealType
	}
	return 0
}

func init() {
	proto.RegisterType((*Strays)(nil), "canine_chain.storage.Strays")
	proto.RegisterType((*StrayV2)(nil), "canine_chain.storage.StrayV2")
}

func init() { proto.RegisterFile("canine_chain/storage/strays.proto", fileDescriptor_2da44830ae5f0b34) }

var fileDescriptor_2da44830ae5f0b34 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x63, 0x02, 0x29, 0xf5, 0x84, 0x22, 0x84, 0x2c, 0x90, 0xac, 0xd2, 0xa9, 0x0b, 0x89,
	0x54, 0x6e, 0xc0, 0xdc, 0xa9, 0x45, 0x0c, 0x2c, 0x91, 0x93, 0xbc, 0xa4, 0xa6, 0xa9, 0x13, 0xd9,
	0x46, 0x22, 0x1c, 0x81, 0x89, 0x6b, 0x70, 0x13, 0xc6, 0x8e, 0x8c, 0x28, 0xb9, 0x08, 0xb2, 0x5d,
	0x45, 0x74, 0xec, 0xf6, 0xde, 0x9f, 0xff, 0xfd, 0xf9, 0xe4, 0x1f, 0xdf, 0x66, 0x4c, 0x70, 0x01,
	0x49, 0xb6, 0x66, 0x5c, 0xc4, 0x4a, 0xd7, 0x92, 0x95, 0x10, 0x2b, 0x2d, 0x59, 0xab, 0xa2, 0x46,
	0xd6, 0xba, 0x0e, 0x2f, 0xff, 0x5b, 0xa2, 0xbd, 0x65, 0xfa, 0x81, 0x70, 0xb0, 0xb2, 0xb6, 0xf0,
	0x02, 0xfb, 0x19, 0xcf, 0x09, 0x9a, 0xa0, 0xd9, 0x78, 0x69, 0x46, 0xa3, 0x14, 0x3c, 0x27, 0x27,
	0x4e, 0x29, 0x78, 0x1e, 0x5e, 0xe1, 0x40, 0xf1, 0x52, 0x00, 0x10, 0xdf, 0x8a, 0xfb, 0x2d, 0xbc,
	0xc6, 0xe7, 0x05, 0xaf, 0x40, 0xf1, 0x77, 0x20, 0xa7, 0xf6, 0xcb, 0xb0, 0x9b, 0x9b, 0x2d, 0xc8,
	0x4d, 0x05, 0xe4, 0xcc, 0xdd, 0xb8, 0xcd, 0xa4, 0x83, 0xc8, 0x49, 0x30, 0x41, 0x33, 0x7f, 0x69,
	0xc6, 0xe9, 0x17, 0xc2, 0x23, 0x0b, 0xf3, 0x34, 0x3f, 0x8a, 0x46, 0x1e, 0xd0, 0xc8, 0xf0, 0x06,
	0x8f, 0xcd, 0xdf, 0x93, 0x01, 0xc7, 0x77, 0x38, 0xab, 0xa3, 0x70, 0x4c, 0x4c, 0x0e, 0xac, 0x4a,
	0x74, 0xdb, 0x00, 0x19, 0xb9, 0x18, 0x23, 0x3c, 0xb6, 0x0d, 0x3c, 0x2c, 0xbe, 0x3b, 0x8a, 0x76,
	0x1d, 0x45, 0xbf, 0x1d, 0x45, 0x9f, 0x3d, 0xf5, 0x76, 0x3d, 0xf5, 0x7e, 0x7a, 0xea, 0x3d, 0xcf,
	0x4b, 0xae, 0xd7, 0xaf, 0x69, 0x94, 0xd5, 0xdb, 0xf8, 0x85, 0x65, 0x1b, 0x56, 0x2d, 0x58, 0xaa,
	0x62, 0xf7, 0xfc, 0x77, 0xae, 0xa1, 0xb7, 0xa1, 0x23, 0x13, 0xae, 0xd2, 0xc0, 0x76, 0x74, 0xff,
	0x17, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xf0, 0x29, 0x42, 0xc8, 0x01, 0x00, 0x00,
}

func (m *Strays) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Strays) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Strays) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.End != 0 {
		i = encodeVarintStrays(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintStrays(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Filesize) > 0 {
		i -= len(m.Filesize)
		copy(dAtA[i:], m.Filesize)
		i = encodeVarintStrays(dAtA, i, uint64(len(m.Filesize)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signee) > 0 {
		i -= len(m.Signee)
		copy(dAtA[i:], m.Signee)
		i = encodeVarintStrays(dAtA, i, uint64(len(m.Signee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Fid) > 0 {
		i -= len(m.Fid)
		copy(dAtA[i:], m.Fid)
		i = encodeVarintStrays(dAtA, i, uint64(len(m.Fid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintStrays(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StrayV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StrayV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StrayV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DealType != 0 {
		i = encodeVarintStrays(dAtA, i, uint64(m.DealType))
		i--
		dAtA[i] = 0x38
	}
	if m.End != 0 {
		i = encodeVarintStrays(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Merkle) > 0 {
		i -= len(m.Merkle)
		copy(dAtA[i:], m.Merkle)
		i = encodeVarintStrays(dAtA, i, uint64(len(m.Merkle)))
		i--
		dAtA[i] = 0x2a
	}
	if m.FileSize != 0 {
		i = encodeVarintStrays(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintStrays(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Fid) > 0 {
		i -= len(m.Fid)
		copy(dAtA[i:], m.Fid)
		i = encodeVarintStrays(dAtA, i, uint64(len(m.Fid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintStrays(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStrays(dAtA []byte, offset int, v uint64) int {
	offset -= sovStrays(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Strays) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovStrays(uint64(l))
	}
	l = len(m.Fid)
	if l > 0 {
		n += 1 + l + sovStrays(uint64(l))
	}
	l = len(m.Signee)
	if l > 0 {
		n += 1 + l + sovStrays(uint64(l))
	}
	l = len(m.Filesize)
	if l > 0 {
		n += 1 + l + sovStrays(uint64(l))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovStrays(uint64(l))
	}
	if m.End != 0 {
		n += 1 + sovStrays(uint64(m.End))
	}
	return n
}

func (m *StrayV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovStrays(uint64(l))
	}
	l = len(m.Fid)
	if l > 0 {
		n += 1 + l + sovStrays(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovStrays(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovStrays(uint64(m.FileSize))
	}
	l = len(m.Merkle)
	if l > 0 {
		n += 1 + l + sovStrays(uint64(l))
	}
	if m.End != 0 {
		n += 1 + sovStrays(uint64(m.End))
	}
	if m.DealType != 0 {
		n += 1 + sovStrays(uint64(m.DealType))
	}
	return n
}

func sovStrays(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStrays(x uint64) (n int) {
	return sovStrays(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Strays) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStrays
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Strays: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Strays: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrays
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStrays
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrays
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStrays
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrays
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStrays
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filesize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrays
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStrays
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filesize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrays
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStrays
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStrays(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStrays
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StrayV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStrays
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StrayV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StrayV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrays
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStrays
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrays
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStrays
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrays
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStrays
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrays
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStrays
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merkle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealType", wireType)
			}
			m.DealType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStrays(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStrays
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStrays(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStrays
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStrays
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStrays
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStrays
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStrays
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStrays
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStrays        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStrays          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStrays = fmt.Errorf("proto: unexpected end of group")
)
