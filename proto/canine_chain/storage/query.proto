syntax = "proto3";
package canine_chain.storage;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "canine_chain/storage/params.proto";
import "canine_chain/storage/active_deals.proto";
import "canine_chain/storage/providers.proto";
import "canine_chain/storage/payment_info.proto";

option go_package = "github.com/jackalLabs/canine-chain/x/storage/types";

service Query {
  rpc Params(QueryParams) returns (QueryParamsResponse) {
    option (google.api.http).get = "/jackal/canine-chain/storage/params";
  }

  // Queries a File by merkle, owner, and start.
  rpc File(QueryFile) returns (QueryFileResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/files/{merkle}/{owner}/{start}";
  }

  // Queries a list of open files by provider_address.
  rpc OpenFiles(QueryOpenFiles)
      returns (QueryAllFilesResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/open_files/{provider_address}";
  }

  // Queries a list of File items.
  rpc AllFiles(QueryAllFiles)
      returns (QueryAllFilesResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/files";
  }

  // Queries a list of File items matching the merkle.
  rpc AllFilesByMerkle(QueryAllFilesByMerkle)
      returns (QueryAllFilesByMerkleResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/files/merkle/{merkle}";
  }

  // Queries a list of File items matching the owner.
  rpc AllFilesByOwner(QueryAllFilesByOwner)
      returns (QueryAllFilesByOwnerResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/files/owner/{owner}";
  }

  // Queries a Proof by provider_address, merkle, owner, and start.
  rpc Proof(QueryProof)
      returns (QueryProofResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/proofs/{provider_address}/{merkle}/{owner}/{start}";
  }

  // Queries a list of Proof items.
  rpc AllProofs(QueryAllProofs)
      returns (QueryAllProofsResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/proofs";
  }

  // Queries a list of Proof items by provider_address.
  rpc ProofsByAddress(QueryProofsByAddress)
      returns (QueryProofsByAddressResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/proofs/{provider_address}";
  }

  // Queries a Provider by address.
  rpc Provider(QueryProvider) returns (QueryProviderResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/providers/{address}";
  }

  // Queries a list of Provider items.
  rpc AllProviders(QueryAllProviders)
      returns (QueryAllProvidersResponse) {
    option (google.api.http).get = "/jackal/canine-chain/storage/providers";
  }

  // Queries an Attestation by prover, merkle, owner, and start.
  rpc Attestation(QueryAttestation) returns (QueryAttestationResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/attestations/{prover}/{merkle}/{owner}/{start}";
  }

  // Queries a list of Attestation items.
  rpc AllAttestations(QueryAllAttestations)
      returns (QueryAllAttestationsResponse) {
    option (google.api.http).get = "/jackal/canine-chain/storage/attestations";
  }

  // Queries a Report by prover, merkle, owner, and start.
  rpc Report(QueryReport) returns (QueryReportResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/reports/{prover}/{merkle}/{owner}/{start}";
  }

  // Queries a list of Report items.
  rpc AllReports(QueryAllReports)
      returns (QueryAllReportsResponse) {
    option (google.api.http).get = "/jackal/canine-chain/storage/reports";
  }

  // Queries free space by address.
  rpc FreeSpace(QueryFreeSpace) returns (QueryFreeSpaceResponse) { // TODO: how is this different from GetClientFreeSpace
    option (google.api.http).get =
        "/jackal/canine-chain/storage/free_space/{address}";
  }

  // Queries how many files a provider has stored by address.
  rpc StoreCount(QueryStoreCount) returns (QueryStoreCountResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/storing/{address}";
  }

  // Queries where a file is located by merkle.
  rpc FindFile(QueryFindFile) returns (QueryFindFileResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/find_file/{merkle}";
  }

  // Queries free space by address.
  rpc GetClientFreeSpace(QueryClientFreeSpace) // TODO: how is this different from FreeSpace
      returns (QueryClientFreeSpaceResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/get_client_free_space/{address}";
  }

  // Queries a PayData by address.
  rpc GetPayData(QueryPayData) returns (QueryPayDataResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/get_pay_data/{address}";
  }

  // Queries a StoragePaymentInfo by address.
  rpc StoragePaymentInfo(QueryStoragePaymentInfo) returns (QueryStoragePaymentInfoResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/payment_info/{address}";
  }

  // Queries a list of StoragePaymentInfo items.
  rpc AllStoragePaymentInfo(QueryAllStoragePaymentInfo)
      returns (QueryAllStoragePaymentInfoResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/payment_info";
  }

  // Queries whether user can upload a file based on size.
  rpc FileUploadCheck(QueryFileUploadCheck) returns (QueryFileUploadCheckResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/file_upload_check";
  }

  // Queries current price of storage.
  rpc PriceCheck(QueryPriceCheck) returns (QueryPriceCheckResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/price_check/{duration}/{bytes}";
  }

  // Queries a list of ActiveProviders items.
  rpc ActiveProviders(QueryActiveProviders) returns (QueryActiveProvidersResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/active_providers";
  }

  // Queries protocol storage space used and purchased.
  rpc StorageStats(QueryStorageStats) returns (QueryStorageStatsResponse) {
    option (google.api.http).get =
        "/jackal/canine-chain/storage/storage_stats";
  }
}

message QueryParams {}

message QueryParamsResponse {
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryProof {
  string provider_address = 1;
  bytes merkle = 2;
  string owner = 3;
  int64 start = 4;
}

message QueryProofResponse {
  FileProof proof = 1 [ (gogoproto.nullable) = false ];
}

message QueryProofsByAddress {
  string provider_address = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryProofsByAddressResponse {
  repeated FileProof proofs = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllProofs {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllProofsResponse {
  repeated FileProof proofs = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryFile {
  bytes merkle = 1;
  string owner = 2;
  int64 start = 3;
}

message QueryFileResponse {
  UnifiedFile file = 1 [ (gogoproto.nullable) = false ];
}

message QueryOpenFiles {
  string provider_address= 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllFiles {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFilesResponse {
  repeated UnifiedFile files = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllFilesByMerkle {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  bytes merkle = 2;
}

message QueryAllFilesByMerkleResponse {
  repeated UnifiedFile files = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllFilesByOwner {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  string owner = 2;
}

message QueryAllFilesByOwnerResponse {
  repeated UnifiedFile files = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryProvider { string address = 1; }

message QueryProviderResponse {
  Providers provider = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllProviders {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllProvidersResponse {
  repeated Providers providers = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAttestation {
  string prover = 1;
  bytes merkle = 2;
  string owner = 3;
  int64 start = 4;
}

message QueryAttestationResponse {
  AttestationForm attestation = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllAttestations {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllAttestationsResponse {
  repeated AttestationForm attestations = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryReport {
  string prover = 1;
  bytes merkle = 2;
  string owner = 3;
  int64 start = 4;
}

message QueryReportResponse {
  ReportForm report = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllReports {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllReportsResponse {
  repeated ReportForm reports = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryFreeSpace {
  string address = 1;
}

message QueryFreeSpaceResponse {
  int64 space = 1;
}

message QueryStoreCount {
  string address = 1;
}

message QueryStoreCountResponse {
  int64 count = 1;
}

message QueryFindFile {
  bytes merkle = 1;
}

message QueryFindFileResponse {
  repeated string provider_ips = 1;
}

message QueryClientFreeSpace {
  string address = 1;
}

message QueryClientFreeSpaceResponse {
  int64 bytes_free = 1;
}

message QueryPayData {
  string address = 1;
}

message QueryPayDataResponse {
  int64 time_remaining = 1;
  int64 bytes = 2;
}

message QueryStoragePaymentInfo {
  string address = 1;
}

message QueryStoragePaymentInfoResponse {
  StoragePaymentInfo storage_payment_info = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllStoragePaymentInfo {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStoragePaymentInfoResponse  {
  repeated StoragePaymentInfo storage_payment_info = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryFileUploadCheck {
  string address = 1;
  int64 bytes = 2;
}

message QueryFileUploadCheckResponse {
  bool valid = 1;
}

message QueryPriceCheck {
  int64 duration = 1; // days to check for
  int64 bytes = 2;
}

message QueryPriceCheckResponse {
  int64 price = 1;
}

message QueryActiveProviders {}

message QueryActiveProvidersResponse {
  repeated ActiveProviders providers = 1 [ (gogoproto.nullable) = false ];
}

message QueryStorageStats {}

message QueryStorageStatsResponse {
  uint64 purchased = 1;
  uint64 used = 2;
  bytes used_ratio = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
  uint64 active_users = 4;
  map<int64, int64> users_by_plan= 5;
}
