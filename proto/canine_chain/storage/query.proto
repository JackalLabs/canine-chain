syntax = "proto3";
package canine_chain.storage;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "canine_chain/storage/params.proto";
import "canine_chain/storage/contracts.proto";
import "canine_chain/storage/active_deals.proto";
import "canine_chain/storage/providers.proto";
import "canine_chain/storage/strays.proto";
import "canine_chain/storage/fid_cid.proto";
import "canine_chain/storage/payment_info.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/jackalLabs/canine-chain/x/storage/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/jackal-dao/canine-chain/storage/params";
  }
  // Queries a Contracts by index.
  rpc Contracts(QueryContractRequest) returns (QueryContractResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/contracts/{cid}";
  }

  // Queries a list of Contracts items.
  rpc ContractsAll(QueryAllContractsRequest)
      returns (QueryAllContractsResponse) {
    option (google.api.http).get = "/jackal-dao/canine-chain/storage/contracts";
  }

  // Queries a ActiveDeals by index.
  rpc ActiveDeals(QueryActiveDealRequest) returns (QueryActiveDealResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/active_deals/{cid}";
  }

  // Queries a list of ActiveDeals items.
  rpc ActiveDealsAll(QueryAllActiveDealsRequest)
      returns (QueryAllActiveDealsResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/active_deals";
  }

  // Queries a Providers by index.
  rpc Providers(QueryProviderRequest) returns (QueryProviderResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/providers/{address}";
  }

  // Queries a list of Providers items.
  rpc ProvidersAll(QueryAllProvidersRequest)
      returns (QueryAllProvidersResponse) {
    option (google.api.http).get = "/jackal-dao/canine-chain/storage/providers";
  }

  // Queries a Attestation by index.
  rpc Attestation(QueryAttestationRequest) returns (QueryAttestationResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/attestations/{cid}";
  }

  // Queries a list of Attestation items.
  rpc AttestationsAll(QueryAllAttestationsRequest)
      returns (QueryAllAttestationsResponse) {
    option (google.api.http).get = "/jackal-dao/canine-chain/storage/attestations";
  }

  // Queries a Report by index.
  rpc Reports(QueryReportRequest) returns (QueryReportResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/reports/{cid}";
  }

  // Queries a list of Attestation items.
  rpc ReportsAll(QueryAllReportRequest)
      returns (QueryAllReportResponse) {
    option (google.api.http).get = "/jackal-dao/canine-chain/storage/reports";
  }

  // Queries a list of Freespace items.
  rpc Freespace(QueryFreespaceRequest) returns (QueryFreespaceResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/freespace/{address}";
  }

  // Queries a list of Freespace items.
  rpc StoreCount(QueryStoreCountRequest) returns (QueryStoreCountResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/storing/{address}";
  }

  // Queries a list of FindFile items.
  rpc FindFile(QueryFindFileRequest) returns (QueryFindFileResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/find_file/{fid}";
  }

  // Queries a Strays by index.
  rpc Strays(QueryStrayRequest) returns (QueryStrayResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/strays/{cid}";
  }

  // Queries a list of Strays items.
  rpc StraysAll(QueryAllStraysRequest) returns (QueryAllStraysResponse) {
    option (google.api.http).get = "/jackal-dao/canine-chain/storage/strays";
  }

  // Queries a list of GetClientFreeSpace items.
  rpc GetClientFreeSpace(QueryClientFreeSpaceRequest)
      returns (QueryClientFreeSpaceResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/get_client_free_space/{address}";
  }

  // Queries a FidCid by index.
  rpc FidCid(QueryFidCidRequest) returns (QueryFidCidResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/fid_cid/{fid}";
  }

  // Queries a list of FidCid items.
  rpc FidCidAll(QueryAllFidCidRequest) returns (QueryAllFidCidResponse) {
    option (google.api.http).get = "/jackal-dao/canine-chain/storage/fid_cid";
  }

  // Queries a list of GetPayData items.
  rpc GetPayData(QueryPayDataRequest) returns (QueryPayDataResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/get_pay_data/{address}";
  }

  // Queries a StoragePaymentInfo by address.
  rpc StoragePaymentInfo(QueryStoragePaymentInfoRequest) returns (QueryStoragePaymentInfoResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/payment_info/{address}";
  }

  // Queries a list of StoragePaymentInfo items.
  rpc StoragePaymentInfoAll(QueryAllStoragePaymentInfoRequest)
      returns (QueryAllStoragePaymentInfoResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/payment_info";
  }

  // Queries whether user can upload a file based on size
  rpc FileUploadCheck(QueryFileUploadCheckRequest) returns (QueryFileUploadCheckResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/file_upload_check";
  }

  // Queries whether user can upload a file based on size
  rpc PriceCheck(QueryPriceCheckRequest) returns (QueryPriceCheckResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/price_check/{duration}/{bytes}";
  }

  // Queries whether user can upload a file based on size
  rpc ActiveProviders(QueryActiveProvidersRequest) returns (QueryActiveProvidersResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/active_providers";
  }


  // Queries the storage space used and purchased
  rpc StorageStats(QueryStorageStatsRequest) returns (QueryStorageStatsResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/storage_stats";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryContractRequest { string cid = 1; }

message QueryContractResponse {
  Contracts contracts = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllContractsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllContractsResponse {
  repeated Contracts contracts = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryActiveDealRequest { string cid = 1; }

message QueryActiveDealResponse {
  ActiveDeals active_deals = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllActiveDealsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllActiveDealsResponse {
  repeated ActiveDeals active_deals = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryProviderRequest { string address = 1; }

message QueryProviderResponse {
  Providers providers = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllProvidersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllProvidersResponse {
  repeated Providers providers = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryAttestationRequest { string cid = 1; }

message QueryAttestationResponse {
  AttestationForm attestation = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllAttestationsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllAttestationsResponse {
  repeated AttestationForm attestations = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryReportRequest { string cid = 1; }

message QueryReportResponse {
  ReportForm report = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllReportRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllReportResponse {
  repeated ReportForm reports = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryFreespaceRequest { string address = 1; }

message QueryStoreCountRequest { string address = 1; }

message QueryFreespaceResponse { string space = 1; }

message QueryStoreCountResponse { string count = 1; }


message QueryFindFileRequest { string fid = 1; }

message QueryFindFileResponse { string provider_ips = 1; }


message QueryStrayRequest { string cid = 1; }

message QueryStrayResponse {
  Strays strays = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllStraysRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStraysResponse {
  repeated Strays strays = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryClientFreeSpaceRequest { string address = 1; }

message QueryClientFreeSpaceResponse { int64 bytesfree = 1; }

message QueryFidCidRequest { string fid = 1; }

message QueryFidCidResponse {
  FidCid fid_cid = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllFidCidRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFidCidResponse {
  repeated FidCid fid_cid = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryPayDataRequest { string address = 1; }

message QueryPayDataResponse {
  int64 time_remaining = 1;
  int64 bytes = 2;
}

message QueryStoragePaymentInfoRequest { string address = 1; }

message QueryStoragePaymentInfoResponse {
  StoragePaymentInfo storage_payment_info = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllStoragePaymentInfoRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStoragePaymentInfoResponse  {
  repeated StoragePaymentInfo storage_payment_info = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryFileUploadCheckRequest {
  string address = 1;
  int64 bytes = 2;
}

message QueryFileUploadCheckResponse {
  bool valid = 1;
}

message QueryPriceCheckRequest {
  string duration = 1;
  int64 bytes = 2;
}

message QueryPriceCheckResponse {
  int64 price = 1;
}

message QueryActiveProvidersRequest {
}

message QueryActiveProvidersResponse {
  repeated ActiveProviders providers = 1 [ (gogoproto.nullable) = false ];
}

message QueryStorageStatsRequest {}

message QueryStorageStatsResponse {
  int64 purchased = 1;
  int64 used = 2;
  bytes usedRatio = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
  int64 activeUsers = 4;
  int64 uniqueUsers = 5;
  int64 permUsed = 6;
}
// this line is used by starport scaffolding # 3
